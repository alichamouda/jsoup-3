/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 22 22:08:49 GMT 2022
 */

package org.jsoup.safety;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.safety.Whitelist;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Whitelist_ESTest extends Whitelist_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Whitelist.AttributeValue whitelist_AttributeValue0 = Whitelist.AttributeValue.valueOf("STOP");
      boolean boolean0 = whitelist_AttributeValue0.equals("STOP");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Whitelist.TagName whitelist_TagName0 = new Whitelist.TagName("/rGs");
      boolean boolean0 = whitelist_TagName0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      Tag tag0 = Tag.valueOf("blockquote");
      Attributes attributes0 = whitelist0.getEnforcedAttributes("blockquote");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "blockquote", attributes0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "blockquote";
      Whitelist whitelist1 = whitelist0.addAttributes("blockquote", stringArray0);
      whitelist1.addProtocols("blockquote", "blockquote", stringArray0);
      Attribute attribute0 = new Attribute("blockquote", "blockquote", attributes0);
      whitelist0.preserveRelativeLinks(true);
      boolean boolean0 = whitelist0.isSafeAttribute("blockquote", pseudoTextElement0, attribute0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      whitelist0.addEnforcedAttribute("Z`5ES:KG", "Z`5ES:KG", "Z`5ES:KG");
      Document document0 = new Document("Z`5ES:KG");
      Attribute attribute0 = new Attribute("Z`5ES:KG", "cite");
      boolean boolean0 = whitelist0.isSafeAttribute("Z`5ES:KG", document0, attribute0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      whitelist0.addEnforcedAttribute("Z`5ES:KG", "ol", "Z`5ES:KG");
      Document document0 = new Document("Z`5ES:KG");
      Attribute attribute0 = new Attribute("sub", "cite");
      boolean boolean0 = whitelist0.isSafeAttribute("Z`5ES:KG", document0, attribute0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      Tag tag0 = Tag.valueOf("blockquote");
      Attributes attributes0 = whitelist0.getEnforcedAttributes("blockquote");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "blockquote", attributes0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "blockquote";
      Whitelist whitelist1 = whitelist0.addAttributes("blockquote", stringArray0);
      whitelist1.addProtocols("blockquote", "blockquote", stringArray0);
      Attribute attribute0 = new Attribute("blockquote", "blockquote", attributes0);
      boolean boolean0 = whitelist0.isSafeAttribute("blockquote", pseudoTextElement0, attribute0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("aHGHDS)[t);", parseSettings0);
      Attributes attributes0 = whitelist0.getEnforcedAttributes("aHGHDS)[t);");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "aHGHDS)[t);", attributes0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "{";
      whitelist0.addAttributes("aHGHDS)[t);", stringArray0);
      Attribute attribute0 = Attribute.createFromEncoded("{", "aHGHDS)[t);");
      boolean boolean0 = whitelist0.isSafeAttribute("aHGHDS)[t);", pseudoTextElement0, attribute0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      Tag tag0 = Tag.valueOf("blockquote");
      Attributes attributes0 = whitelist0.getEnforcedAttributes("blockquote");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "blockquote", attributes0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "blockquote";
      whitelist0.addAttributes("blockquote", stringArray0);
      Attribute attribute0 = new Attribute("blockquote", "blockquote", attributes0);
      boolean boolean0 = whitelist0.isSafeAttribute("blockquote", pseudoTextElement0, attribute0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      ParseSettings parseSettings0 = new ParseSettings(true, false);
      Tag tag0 = Tag.valueOf("blockquote", parseSettings0);
      Attributes attributes0 = whitelist0.getEnforcedAttributes("H@ru^");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "H@ru^", attributes0);
      Attribute attribute0 = Attribute.createFromEncoded("b{+", "");
      whitelist0.isSafeAttribute("blockquote", pseudoTextElement0, attribute0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      boolean boolean0 = whitelist0.isSafeTag("ol");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      boolean boolean0 = whitelist0.isSafeTag("ol");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Z`5ES:KG";
      whitelist0.addProtocols("Z`5ES:KG", "Z`5ES:KG", stringArray0);
      whitelist0.addProtocols("Z`5ES:KG", "mC(O)7", stringArray0);
      Whitelist whitelist1 = whitelist0.removeProtocols("Z`5ES:KG", "Z`5ES:KG", stringArray0);
      assertSame(whitelist0, whitelist1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "http";
      Whitelist whitelist1 = whitelist0.removeProtocols("cite", "cite", stringArray0);
      assertSame(whitelist0, whitelist1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Z`5ES:KG";
      whitelist0.addProtocols("ol", "ol", stringArray0);
      // Undeclared exception!
      try { 
        whitelist0.removeProtocols("ol", "code", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Z`5ES:KG";
      Whitelist whitelist1 = whitelist0.addProtocols("ol", "ol", stringArray0);
      Whitelist whitelist2 = whitelist0.removeProtocols("ol", "ol", stringArray0);
      assertSame(whitelist2, whitelist1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.simpleText();
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        whitelist0.removeProtocols("DO", "STOP", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Z`5ES:KG";
      Whitelist whitelist1 = whitelist0.addProtocols("Z`5ES:KG", "Z`5ES:KG", stringArray0);
      Whitelist whitelist2 = whitelist0.addProtocols("Z`5ES:KG", "Z`5ES:KG", stringArray0);
      assertSame(whitelist2, whitelist1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("th", "h5bi", "u+m6b(GvRG!m&^T,uc");
      Whitelist whitelist2 = whitelist1.removeEnforcedAttribute("th", "U+>-^3,Y");
      assertSame(whitelist0, whitelist2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("http", "http", "http");
      Whitelist whitelist2 = whitelist0.removeEnforcedAttribute("http", "http");
      assertSame(whitelist2, whitelist1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Z`5ES:KG";
      Whitelist whitelist1 = whitelist0.addAttributes("Z`5ES:KG", stringArray0);
      Whitelist whitelist2 = whitelist0.removeEnforcedAttribute("Z`5ES:KG", "ol");
      assertSame(whitelist2, whitelist1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      Whitelist whitelist1 = whitelist0.removeEnforcedAttribute("http", "http");
      assertSame(whitelist0, whitelist1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("alt", "fill", "tbS=h4PPk3Z");
      Whitelist whitelist2 = whitelist1.addEnforcedAttribute("alt", "alt", "tbS=h4PPk3Z");
      assertSame(whitelist0, whitelist2);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Z`5ES:KG";
      Whitelist whitelist1 = whitelist0.removeAttributes(":all", stringArray0);
      assertSame(whitelist1, whitelist0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Z`5ES:KG";
      whitelist0.addAttributes("b", stringArray0);
      Whitelist whitelist1 = whitelist0.removeAttributes(":all", stringArray0);
      assertSame(whitelist1, whitelist0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "http";
      Whitelist whitelist1 = whitelist0.removeAttributes("cite", stringArray0);
      assertSame(whitelist1, whitelist0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Z`5ES:KG";
      Whitelist whitelist1 = whitelist0.addAttributes("Z`5ES:KG", stringArray0);
      Whitelist whitelist2 = whitelist0.removeAttributes("Z`5ES:KG", stringArray0);
      assertSame(whitelist2, whitelist1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        whitelist0.removeAttributes("G? ", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No attribute names supplied.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        whitelist0.addAttributes("unpaused {}", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No attribute names supplied.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "3VFY>[Ej1x1`O4lq>";
      Whitelist whitelist1 = whitelist0.removeTags(stringArray0);
      assertSame(whitelist0, whitelist1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "H@ru^";
      stringArray0[1] = "blockquote";
      stringArray0[2] = "b{+";
      stringArray0[3] = "b{+";
      stringArray0[4] = "blockquote";
      Whitelist whitelist1 = whitelist0.removeAttributes("blockquote", stringArray0);
      assertSame(whitelist1, whitelist0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Z`5ES:KG";
      Whitelist whitelist1 = whitelist0.addAttributes("Z`5ES:KG", stringArray0);
      Whitelist whitelist2 = whitelist1.removeTags(stringArray0);
      assertSame(whitelist0, whitelist2);
  }
}
