/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 22 22:12:10 GMT 2022
 */

package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Iterator;
import java.util.LinkedHashSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.jsoup.helper.StringUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StringUtil_ESTest extends StringUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("o2", "o2", 16777216, "o2", uRLStreamHandler0);
      assertNull(uRL0.getRef());
      assertEquals("o2", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("o2", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("o2", uRL0.getProtocol());
      assertEquals("o2", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals("o2:16777216", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals(16777216, uRL0.getPort());
      assertNull(uRL0.toExternalForm());
      assertNotNull(uRL0);
      
      try { 
        StringUtil.resolve(uRL0, ".bOy9[,IX%Y&|)Nt");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: o2
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      URL uRL1 = StringUtil.resolve(uRL0, "");
      assertTrue(uRL1.equals((Object)uRL0));
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtil.resolve((URL) null, "?RX WG");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      URL uRL1 = StringUtil.resolve(uRL0, ".*4,K$prn~Qmy%VU");
      assertFalse(uRL1.equals((Object)uRL0));
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertEquals("file", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals("some", uRL1.getAuthority());
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "failed: ";
      boolean boolean0 = StringUtil.inSorted("failed: ", stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[0];
      boolean boolean0 = StringUtil.inSorted("e.o", stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "*.T0";
      boolean boolean0 = StringUtil.in("*.T0", stringArray0);
      assertEquals(3, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "*.T0";
      stringArray0[1] = "*.T0";
      stringArray0[2] = "";
      boolean boolean0 = StringUtil.in("onOpen {}", stringArray0);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringUtil.appendNormalisedWhitespace(stringBuilder0, "                   ", false);
      assertEquals(" ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringBuilder stringBuilder0 = StringUtil.stringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringUtil.appendNormalisedWhitespace(stringBuilder0, "          ", true);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("%,4mH,aUx9");
      assertEquals("%,4mH,aUx9", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringUtil.appendNormalisedWhitespace(stringBuilder0, "u&r Rc{C:VsT`A5", true);
      assertEquals("%,4mH,aUx9u&r Rc{C:VsT`A5", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = StringUtil.isInvisibleChar(173);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = StringUtil.isInvisibleChar(8234);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = StringUtil.isInvisibleChar(8204);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = StringUtil.isInvisibleChar(8203);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = StringUtil.isInvisibleChar(8205);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = StringUtil.isActuallyWhitespace(160);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = StringUtil.isActuallyWhitespace(13);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean boolean0 = StringUtil.isActuallyWhitespace(12);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean boolean0 = StringUtil.isActuallyWhitespace(10);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      boolean boolean0 = StringUtil.isActuallyWhitespace(9);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      boolean boolean0 = StringUtil.isWhitespace(13);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = StringUtil.isWhitespace(12);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      boolean boolean0 = StringUtil.isWhitespace(10);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = StringUtil.isWhitespace(9);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      boolean boolean0 = StringUtil.isNumeric("3");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      boolean boolean0 = StringUtil.isNumeric("Queued change lazy={} {} on {}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      boolean boolean0 = StringUtil.isNumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      boolean boolean0 = StringUtil.isNumeric((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = StringUtil.padding(3388);
      boolean boolean0 = StringUtil.isBlank(string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      boolean boolean0 = StringUtil.isBlank("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      boolean boolean0 = StringUtil.isBlank("y`;hCeW7I//");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      boolean boolean0 = StringUtil.isBlank((String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtil.padding((-609));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = StringUtil.padding(17);
      assertEquals("                 ", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "@F0OB(fj7GM*[4";
      String string0 = StringUtil.join(stringArray0, "org.eclipse.jetty.io.IncludeExcludeConnectionStatistics$ConnectionSet");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      String string0 = StringUtil.join(stringArray0, "");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Iterator<Object> iterator0 = linkedHashSet0.iterator();
      String string0 = StringUtil.join(iterator0, "UMxUT");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = StringUtil.resolve("org.jsoup.helper.StringUtil", "BLOCKING");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringUtil stringUtil0 = new StringUtil();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = StringUtil.normaliseWhitespace("*.T0");
      assertEquals("*.T0", string0);
  }
}
