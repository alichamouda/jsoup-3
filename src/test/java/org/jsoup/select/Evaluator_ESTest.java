/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 22 22:19:37 GMT 2022
 */

package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.SynchronousQueue;
import java.util.regex.Pattern;
import org.eclipse.jetty.io.ArrayByteBufferPool;
import org.eclipse.jetty.io.LeakTrackingByteBufferPool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.select.CombiningEvaluator;
import org.jsoup.select.Evaluator;
import org.jsoup.select.NodeVisitor;
import org.jsoup.select.StructuralEvaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluator_ESTest extends Evaluator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Evaluator.IsOnlyOfType evaluator_IsOnlyOfType0 = new Evaluator.IsOnlyOfType();
      StructuralEvaluator.Not structuralEvaluator_Not0 = new StructuralEvaluator.Not(evaluator_IsOnlyOfType0);
      StructuralEvaluator.PreviousSibling structuralEvaluator_PreviousSibling0 = new StructuralEvaluator.PreviousSibling(structuralEvaluator_Not0);
      structuralEvaluator_PreviousSibling0.matches((Element) null, (Element) null);
      StructuralEvaluator.ImmediateParent structuralEvaluator_ImmediateParent0 = new StructuralEvaluator.ImmediateParent(evaluator_IsOnlyOfType0);
      structuralEvaluator_ImmediateParent0.toString();
      Evaluator.AttributeWithValueContaining evaluator_AttributeWithValueContaining0 = new Evaluator.AttributeWithValueContaining(":ImmediateParent:only-of-type", "\"RawtextEndTagName\"");
      // Undeclared exception!
      try { 
        evaluator_AttributeWithValueContaining0.matches((Element) null, (Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$AttributeWithValueContaining", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      Document document0 = Document.createShell("M!>{iw] 1f%})*\"3+z");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "M!>{iw] 1f%})*\"3+z");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Element element0 = document1.body();
      element0.getElementsByIndexEquals((-132379129));
      Element element1 = element0.val("M!>{iw] 1f%})*\"3+z");
      Element element2 = element1.after((Node) document1);
      evaluator_IsRoot0.matches(element2, element1);
      StructuralEvaluator.ImmediatePreviousSibling structuralEvaluator_ImmediatePreviousSibling0 = new StructuralEvaluator.ImmediatePreviousSibling(evaluator_IsRoot0);
      Evaluator.IsNthLastOfType evaluator_IsNthLastOfType0 = new Evaluator.IsNthLastOfType((-34505881), (-132379129));
      evaluator_IsNthLastOfType0.toString();
      evaluator_IsNthLastOfType0.calculatePosition(element2, document0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      Document document0 = Document.createShell("s`HfV7\"");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Element element0 = document1.toggleClass(":containsData(%s)");
      evaluator_IsRoot0.matches(element0, document0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Evaluator.IsEmpty evaluator_IsEmpty0 = new Evaluator.IsEmpty();
      Document document0 = Document.createShell("%s@%x{size=%d}");
      Element element0 = document0.val("%s@%x{size=%d}");
      element0.appendText("%s@%x{size=%d}");
      Document document1 = element0.ownerDocument();
      Element element1 = document1.body();
      element0.nextSibling();
      element0.toString();
      Element element2 = element1.append("{ =.ukDH>");
      evaluator_IsEmpty0.matches(element2, element0);
      StructuralEvaluator.ImmediateParent structuralEvaluator_ImmediateParent0 = new StructuralEvaluator.ImmediateParent(evaluator_IsEmpty0);
      Evaluator.Class evaluator_Class0 = new Evaluator.Class("]8SWkIgumV");
      evaluator_Class0.toString();
      Evaluator.ContainsOwnText evaluator_ContainsOwnText0 = new Evaluator.ContainsOwnText("");
      evaluator_ContainsOwnText0.matches(document0, document0);
      StructuralEvaluator.Root structuralEvaluator_Root0 = new StructuralEvaluator.Root();
      structuralEvaluator_Root0.matches(document1, element0);
      Pattern pattern0 = Pattern.compile("[%s=%s]", 57);
      Evaluator.MatchesOwn evaluator_MatchesOwn0 = new Evaluator.MatchesOwn(pattern0);
      evaluator_MatchesOwn0.toString();
      Evaluator.IndexLessThan evaluator_IndexLessThan0 = new Evaluator.IndexLessThan(57);
      Element element3 = document1.body();
      evaluator_IndexLessThan0.matches(element3, document0);
      StructuralEvaluator.Not structuralEvaluator_Not0 = new StructuralEvaluator.Not(evaluator_IsEmpty0);
      structuralEvaluator_Not0.matches(document1, document0);
      Evaluator.IsFirstChild evaluator_IsFirstChild0 = new Evaluator.IsFirstChild();
      evaluator_IsFirstChild0.matches(element3, document1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or();
      String string0 = "'.V$kcZdbR";
      Evaluator.AttributeWithValueNot evaluator_AttributeWithValueNot0 = new Evaluator.AttributeWithValueNot("'.V$kcZdbR", "'.V$kcZdbR");
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Tag tag0 = Tag.valueOf("'.V$kcZdbR", parseSettings0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0p{ihF Kb1qVA");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "'.V$kcZdbR", attributes0);
      Element element0 = formElement0.toggleClass("n&sJIwEV");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        element0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("s+", 3687);
      Evaluator.MatchesOwn evaluator_MatchesOwn0 = new Evaluator.MatchesOwn(pattern0);
      evaluator_MatchesOwn0.toString();
      Evaluator.IndexGreaterThan evaluator_IndexGreaterThan0 = new Evaluator.IndexGreaterThan((-1873));
      Tag tag0 = Tag.valueOf(":matchesOwn(s+)");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, ":matchesOwn(s+)", attributes0);
      DocumentType documentType0 = new DocumentType("org.eclipse.jetty.util.statistic.CounterStatistic", "<#", "K|", "org.eclipse.jetty.util.statistic.CounterStatistic");
      Element element1 = element0.appendChild(documentType0);
      Element element2 = element1.prependText("");
      Element element3 = element2.shallowClone();
      Element element4 = element3.text("<#");
      evaluator_IndexGreaterThan0.matches(element4, element1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Evaluator.IndexGreaterThan evaluator_IndexGreaterThan0 = new Evaluator.IndexGreaterThan(9);
      int int0 = 551;
      int int1 = 61;
      Evaluator.IsNthLastOfType evaluator_IsNthLastOfType0 = new Evaluator.IsNthLastOfType(551, 61);
      Element element0 = null;
      String string0 = "mIeiB^\\AOQp]";
      Tag tag0 = Tag.valueOf("mIeiB^AOQp]");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "mIeiB^AOQp]", attributes0);
      FormElement formElement1 = formElement0.addElement((Element) null);
      formElement1.appendChild(formElement0);
      // Undeclared exception!
      formElement1.getElementsByAttributeStarting("%s@%x{%s}");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Evaluator[] evaluatorArray0 = new Evaluator[7];
      Evaluator.Class evaluator_Class0 = new Evaluator.Class("key: +- bean, += managed, +~ unmanaged, +? auto, +: iterable, +] array, +@ map, +> undefined");
      evaluatorArray0[0] = (Evaluator) evaluator_Class0;
      Evaluator.AllElements evaluator_AllElements0 = new Evaluator.AllElements();
      evaluatorArray0[1] = (Evaluator) evaluator_AllElements0;
      String string0 = "I6GXN)}JPFZF0";
      Evaluator.AttributeWithValueStarting evaluator_AttributeWithValueStarting0 = new Evaluator.AttributeWithValueStarting("key: +- bean, += managed, +~ unmanaged, +? auto, +: iterable, +] array, +@ map, +> undefined", "I6GXN)}JPFZF0");
      evaluatorArray0[2] = (Evaluator) evaluator_AttributeWithValueStarting0;
      Evaluator.MatchText evaluator_MatchText0 = new Evaluator.MatchText();
      evaluatorArray0[3] = (Evaluator) evaluator_MatchText0;
      Evaluator.TagEndsWith evaluator_TagEndsWith0 = new Evaluator.TagEndsWith("");
      evaluatorArray0[4] = (Evaluator) evaluator_TagEndsWith0;
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      evaluatorArray0[5] = (Evaluator) evaluator_IsRoot0;
      Evaluator.AttributeWithValueNot evaluator_AttributeWithValueNot0 = new Evaluator.AttributeWithValueNot("OtG(Q&>v]Y!a@F", "I6GXN)}JPFZF0");
      evaluatorArray0[6] = (Evaluator) evaluator_AttributeWithValueNot0;
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(evaluatorArray0);
      combiningEvaluator_And0.toString();
      evaluator_AttributeWithValueNot0.toString();
      Document document0 = Document.createShell("");
      String string1 = "`";
      DocumentType documentType0 = new DocumentType(":eq(%d)", "", "I6GXN)}JPFZF0", "`");
      Element element0 = document0.prependChild(documentType0);
      Element element1 = element0.addClass("org.jsoup.select.Evaluator$Class@0000000001 * [key: +- bean, += managed, +~ unmanaged, +? auto, +: iterable, +] array, +@ map, +> undefined^=i6gxn)}jpfzf0] :matchText  :root [otg(q&>v]y!a@f!=i6gxn)}jpfzf0]");
      Element element2 = element1.tagName("u|kgbY}]Xz4I8/");
      // Undeclared exception!
      try { 
        element2.before((Node) documentType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Evaluator.IsOnlyChild evaluator_IsOnlyChild0 = new Evaluator.IsOnlyChild();
      StructuralEvaluator.ImmediateParent structuralEvaluator_ImmediateParent0 = new StructuralEvaluator.ImmediateParent(evaluator_IsOnlyChild0);
      structuralEvaluator_ImmediateParent0.toString();
      StructuralEvaluator.Not structuralEvaluator_Not0 = new StructuralEvaluator.Not(structuralEvaluator_ImmediateParent0);
      Element element0 = new Element("-U*Zr<6");
      Tag tag0 = Tag.valueOf("-U*Zr<6");
      Attributes attributes0 = new Attributes();
      Element element1 = new Element(tag0, "-U*Zr<6", attributes0);
      Element element2 = element0.appendTo(element1);
      ArrayByteBufferPool arrayByteBufferPool0 = new ArrayByteBufferPool(0, 0, 0);
      arrayByteBufferPool0.clear();
      LeakTrackingByteBufferPool leakTrackingByteBufferPool0 = new LeakTrackingByteBufferPool(arrayByteBufferPool0);
      Class<Node> class0 = Node.class;
      Collection<Node> collection0 = leakTrackingByteBufferPool0.getBeans(class0);
      evaluator_IsOnlyChild0.matches(element2, element2);
      Element element3 = element2.insertChildren(0, collection0);
      Element element4 = element3.empty();
      Element element5 = element4.removeClass("+_~+5");
      element5.toString();
      Evaluator.IsOnlyOfType evaluator_IsOnlyOfType0 = new Evaluator.IsOnlyOfType();
      // Undeclared exception!
      try { 
        leakTrackingByteBufferPool0.unmanage(evaluator_IsOnlyOfType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown bean :only-of-type
         //
         verifyException("org.eclipse.jetty.util.component.ContainerLifeCycle", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Evaluator.IsNthOfType evaluator_IsNthOfType0 = new Evaluator.IsNthOfType(0, 2747);
      Document document0 = Document.createShell("org.jsoup.select.StructuralEvaluator$ImmediatePreviousSibling");
      Element element0 = document0.head();
      element0.getElementsMatchingText("org.eclipse.jetty.io.LeakTrackingByteBufferPool");
      evaluator_IsNthOfType0.calculatePosition(document0, element0);
      Element element1 = element0.appendTo(document0);
      evaluator_IsNthOfType0.calculatePosition(element0, element0);
      StructuralEvaluator.Not structuralEvaluator_Not0 = new StructuralEvaluator.Not(evaluator_IsNthOfType0);
      structuralEvaluator_Not0.toString();
      Evaluator.AttributeWithValue evaluator_AttributeWithValue0 = new Evaluator.AttributeWithValue(":not:nth-of-type(2747)", ":not:nth-of-type(2747)");
      evaluator_AttributeWithValue0.toString();
      Evaluator.ContainsOwnText evaluator_ContainsOwnText0 = new Evaluator.ContainsOwnText(":not:nth-of-type(2747)");
      Tag tag0 = element1.tag();
      Attributes attributes0 = document0.attributes();
      FormElement formElement0 = new FormElement(tag0, ":not:nth-of-type(2747)", attributes0);
      evaluator_ContainsOwnText0.matches(formElement0, formElement0);
      Evaluator.Matches evaluator_Matches0 = new Evaluator.Matches((Pattern) null);
      evaluator_Matches0.toString();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Evaluator.IsEmpty evaluator_IsEmpty0 = new Evaluator.IsEmpty();
      Document document0 = Document.createShell("%s@%x{size=%d}");
      Element element0 = document0.val("%s@%x{size=%d}");
      element0.appendText("%s@%x{size=%d}");
      Document document1 = element0.ownerDocument();
      Element element1 = document1.body();
      element0.nextSibling();
      element0.toString();
      Element element2 = element1.append("{ =.ukDH>");
      evaluator_IsEmpty0.matches(element2, element0);
      StructuralEvaluator.ImmediateParent structuralEvaluator_ImmediateParent0 = new StructuralEvaluator.ImmediateParent(evaluator_IsEmpty0);
      Evaluator.Class evaluator_Class0 = new Evaluator.Class("]8SWkIgumV");
      evaluator_Class0.toString();
      Evaluator.ContainsOwnText evaluator_ContainsOwnText0 = new Evaluator.ContainsOwnText("");
      evaluator_ContainsOwnText0.matches(document0, document0);
      StructuralEvaluator.Root structuralEvaluator_Root0 = new StructuralEvaluator.Root();
      structuralEvaluator_Root0.matches(document1, element0);
      Pattern pattern0 = Pattern.compile("[%s=%s]", 57);
      Evaluator.MatchesOwn evaluator_MatchesOwn0 = new Evaluator.MatchesOwn(pattern0);
      evaluator_MatchesOwn0.toString();
      Evaluator.IndexLessThan evaluator_IndexLessThan0 = new Evaluator.IndexLessThan(0);
      Element element3 = document1.body();
      evaluator_IndexLessThan0.matches(element3, document0);
      StructuralEvaluator.Not structuralEvaluator_Not0 = new StructuralEvaluator.Not(evaluator_IsEmpty0);
      structuralEvaluator_Not0.matches(document1, document0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Evaluator.IsLastOfType evaluator_IsLastOfType0 = new Evaluator.IsLastOfType();
      Document document0 = new Document("");
      document0.outerHtml();
      Document document1 = document0.normalise();
      Element element0 = document1.body();
      document1.getElementsByAttributeValue("org.jsoup.select.Evaluator$IsLastOfType", "U4wXpVoFw]WG7QG{J");
      Element element1 = element0.firstElementSibling();
      // Undeclared exception!
      try { 
        element1.getElementsByAttributeValue("}a", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Evaluator.IndexEquals evaluator_IndexEquals0 = new Evaluator.IndexEquals(482);
      evaluator_IndexEquals0.toString();
      Evaluator.ContainsOwnText evaluator_ContainsOwnText0 = new Evaluator.ContainsOwnText("org.jsoup.select.Evaluator$Id");
      evaluator_ContainsOwnText0.toString();
      Pattern pattern0 = Pattern.compile(" of ");
      Evaluator.MatchesOwn evaluator_MatchesOwn0 = new Evaluator.MatchesOwn(pattern0);
      Tag tag0 = Tag.valueOf(" of ");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, ":eq(482)", attributes0);
      Element element0 = formElement0.prependElement("org.jsoup.select.Evaluator$Id");
      Element element1 = element0.addClass(":eq(482)");
      Element element2 = element1.clone();
      element2.ownerDocument();
      evaluator_MatchesOwn0.matches((Element) null, element2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Evaluator.AttributeStarting evaluator_AttributeStarting0 = new Evaluator.AttributeStarting("hZ9tCXg)W:");
      StructuralEvaluator.ImmediateParent structuralEvaluator_ImmediateParent0 = new StructuralEvaluator.ImmediateParent(evaluator_AttributeStarting0);
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      evaluator_IsRoot0.toString();
      String string0 = "y&l9*p";
      Evaluator.Id evaluator_Id0 = new Evaluator.Id("y&l9*p");
      Document document0 = new Document("ThreadPoolExecutor");
      Document document1 = document0.clone();
      document0.childNodesCopy();
      Element element0 = document1.html("2T&s");
      document1.addClass("y&l9*p");
      element0.getElementsByTag("hZ9tCXg)W:");
      Element element1 = element0.append(":root");
      // Undeclared exception!
      try { 
        element1.selectFirst("hZ9tCXg)W:");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'hZ9tCXg)W:': unexpected token at ')W:'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Evaluator.IsOnlyOfType evaluator_IsOnlyOfType0 = new Evaluator.IsOnlyOfType();
      Document document0 = Document.createShell("");
      Element element0 = document0.addClass("org.jsoup.select.Evaluator$MatchText");
      Element element1 = element0.clone();
      evaluator_IsOnlyOfType0.matches(element0, element1);
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("c8JTV'vSyh6(", parseSettings0);
      Element element2 = new Element(tag0, "c8JTV'vSyh6(");
      element2.parent();
      SynchronousQueue<Node> synchronousQueue0 = new SynchronousQueue<Node>();
      // Undeclared exception!
      try { 
        element2.insertChildren(53, (Collection<? extends Node>) synchronousQueue0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Evaluator.IsNthLastChild evaluator_IsNthLastChild0 = new Evaluator.IsNthLastChild(1081, 502);
      StructuralEvaluator.Not structuralEvaluator_Not0 = new StructuralEvaluator.Not(evaluator_IsNthLastChild0);
      Document document0 = new Document("33\"=[NqJ");
      Element element0 = document0.prependElement("33\"=[NqJ");
      Element element1 = element0.after("33\"=[NqJ");
      Element element2 = element1.appendChild(element0);
      Element element3 = element2.attr("33\"=[NqJ", "krmi\"(ol");
      structuralEvaluator_Not0.matches(element3, element1);
      Evaluator.Class evaluator_Class0 = new Evaluator.Class("");
      Tag tag0 = element2.tag();
      CDataNode cDataNode0 = new CDataNode("");
      Attributes attributes0 = cDataNode0.attributes();
      Element element4 = new Element(tag0, "", attributes0);
      Element element5 = element0.after((Node) document0);
      evaluator_Class0.matches(element4, element5);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Evaluator.IndexLessThan evaluator_IndexLessThan0 = new Evaluator.IndexLessThan(45);
      Evaluator.IsLastChild evaluator_IsLastChild0 = new Evaluator.IsLastChild();
      Document document0 = new Document("Vo%P");
      Tag tag0 = document0.tag();
      Tag.valueOf("Vo%P");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag.valueOf("Vo%P", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "Vo%P", attributes0);
      Element element1 = element0.prependChild(document0);
      evaluator_IsLastChild0.matches(element1, element1);
      Evaluator.ContainsText evaluator_ContainsText0 = new Evaluator.ContainsText("Vo%P");
      evaluator_ContainsText0.toString();
      Evaluator.AttributeWithValueContaining evaluator_AttributeWithValueContaining0 = new Evaluator.AttributeWithValueContaining("Vo%P", "select");
      Element element2 = document0.prependElement("Vo%P");
      evaluator_AttributeWithValueContaining0.matches(document0, element2);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Evaluator.MatchText evaluator_MatchText0 = new Evaluator.MatchText();
      Document document0 = Document.createShell("V\"-d2?t_z:'3'#");
      Element element0 = document0.prependText("N-pq");
      evaluator_MatchText0.matches(element0, element0);
      evaluator_MatchText0.toString();
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or();
      element0.dataNodes();
      document0.id();
      // Undeclared exception!
      try { 
        combiningEvaluator_Or0.replaceRightMostEvaluator(evaluator_MatchText0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "";
      Evaluator.TagEndsWith evaluator_TagEndsWith0 = new Evaluator.TagEndsWith("");
      Document document0 = new Document("");
      Document document1 = document0.normalise();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document2 = document1.outputSettings(document_OutputSettings0);
      Element element0 = document2.clone();
      Element element1 = element0.appendText("");
      evaluator_TagEndsWith0.matches(element1, element0);
      evaluator_TagEndsWith0.toString();
      // Undeclared exception!
      try { 
        Tag.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Evaluator.IsOnlyChild evaluator_IsOnlyChild0 = new Evaluator.IsOnlyChild();
      Document document0 = new Document("+{1n D<DpK]t1");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Element element0 = document1.attr("glob:", false);
      Element element1 = element0.appendText("b-D.%Amj!T6M%");
      Document document2 = element1.ownerDocument();
      element1.text();
      Element element2 = document0.append("+{1n D<DpK]t1");
      evaluator_IsOnlyChild0.matches(document2, element2);
      Evaluator[] evaluatorArray0 = new Evaluator[6];
      evaluatorArray0[0] = (Evaluator) evaluator_IsOnlyChild0;
      evaluatorArray0[1] = (Evaluator) evaluator_IsOnlyChild0;
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      evaluatorArray0[2] = (Evaluator) evaluator_IsRoot0;
      evaluatorArray0[3] = (Evaluator) evaluator_IsOnlyChild0;
      evaluatorArray0[4] = (Evaluator) evaluator_IsOnlyChild0;
      evaluatorArray0[5] = (Evaluator) evaluator_IsOnlyChild0;
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(evaluatorArray0);
      ArrayList<Evaluator> arrayList0 = combiningEvaluator_And0.evaluators;
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or(arrayList0);
      Tag tag0 = element2.tag();
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put(":containsOwn(%s)", ":containsOwn(%s)");
      FormElement formElement0 = new FormElement(tag0, ":containsOwn(%s)", attributes1);
      // Undeclared exception!
      try { 
        combiningEvaluator_Or0.matches(document1, formElement0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or();
      Evaluator.AttributeWithValueStarting evaluator_AttributeWithValueStarting0 = new Evaluator.AttributeWithValueStarting("8*l;xib$Vj", "8*l;xib$Vj");
      evaluator_AttributeWithValueStarting0.value = "8*l;xib$Vj";
      combiningEvaluator_Or0.add(evaluator_AttributeWithValueStarting0);
      evaluator_AttributeWithValueStarting0.value = "";
      Evaluator.ContainsText evaluator_ContainsText0 = new Evaluator.ContainsText("");
      Tag tag0 = Tag.valueOf("0i5(m!");
      CDataNode cDataNode0 = new CDataNode(",f#'PkET;i}Y");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "8*l;xib$Vj", attributes0);
      FormElement formElement1 = formElement0.addElement((Element) null);
      evaluator_ContainsText0.matches(formElement1, formElement1);
      StructuralEvaluator.PreviousSibling structuralEvaluator_PreviousSibling0 = new StructuralEvaluator.PreviousSibling(evaluator_AttributeWithValueStarting0);
      structuralEvaluator_PreviousSibling0.matches(formElement0, formElement0);
      StructuralEvaluator.Root structuralEvaluator_Root0 = new StructuralEvaluator.Root();
      structuralEvaluator_Root0.matches(formElement1, (Element) null);
      Evaluator.ContainsData evaluator_ContainsData0 = new Evaluator.ContainsData("");
      evaluator_ContainsData0.toString();
      Evaluator.IsFirstChild evaluator_IsFirstChild0 = new Evaluator.IsFirstChild();
      evaluator_IsFirstChild0.matches(formElement1, formElement0);
      Evaluator[] evaluatorArray0 = new Evaluator[2];
      evaluatorArray0[0] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[1] = (Evaluator) combiningEvaluator_Or0;
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(evaluatorArray0);
      ArrayList<Evaluator> arrayList0 = combiningEvaluator_And0.evaluators;
      CombiningEvaluator.And combiningEvaluator_And1 = new CombiningEvaluator.And(arrayList0);
      combiningEvaluator_And0.num = 1282;
      Document document0 = new Document("KB]pB=1T\"48)!");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      combiningEvaluator_And1.matches(formElement1, document1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("fZ#");
      Evaluator.MatchesOwn evaluator_MatchesOwn0 = new Evaluator.MatchesOwn(pattern0);
      evaluator_MatchesOwn0.toString();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Evaluator.IsNthLastChild evaluator_IsNthLastChild0 = new Evaluator.IsNthLastChild((-864), (-864));
      Tag tag0 = Tag.valueOf("328tRn@5>?}Zd5m(K`");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "328tRn@5>?}Zd5m(K`", attributes0);
      Element element0 = new Element("328tRn@5>?}Zd5m(K`");
      FormElement formElement1 = formElement0.addElement(element0);
      Element element1 = formElement1.empty();
      Element element2 = element1.html("328tRn@5>?}Zd5m(K`");
      evaluator_IsNthLastChild0.matches(element2, formElement1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Evaluator.AttributeWithValueEnding evaluator_AttributeWithValueEnding0 = new Evaluator.AttributeWithValueEnding("]]>", "WAIT_FOR_FLUSH");
      evaluator_AttributeWithValueEnding0.toString();
      evaluator_AttributeWithValueEnding0.value = "3/(AP?";
      evaluator_AttributeWithValueEnding0.key = "WAIT_FOR_FLUSH";
      StructuralEvaluator.Parent structuralEvaluator_Parent0 = new StructuralEvaluator.Parent(evaluator_AttributeWithValueEnding0);
      Evaluator.AllElements evaluator_AllElements0 = new Evaluator.AllElements();
      evaluator_AllElements0.toString();
      Evaluator.IndexGreaterThan evaluator_IndexGreaterThan0 = new Evaluator.IndexGreaterThan(4029);
      evaluator_IndexGreaterThan0.index = 4029;
      evaluator_IndexGreaterThan0.toString();
      Evaluator.AttributeStarting evaluator_AttributeStarting0 = new Evaluator.AttributeStarting("60fDp@b2W2");
      evaluator_AttributeStarting0.toString();
      Evaluator.IndexLessThan evaluator_IndexLessThan0 = new Evaluator.IndexLessThan(2);
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("org.jsoup.SerializationException", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "org.eclipse.jetty.io.ManagedSelector$Connect", attributes0);
      LinkedTransferQueue<Node> linkedTransferQueue0 = new LinkedTransferQueue<Node>();
      // Undeclared exception!
      try { 
        element0.insertChildren(2, (Collection<? extends Node>) linkedTransferQueue0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Evaluator.Class evaluator_Class0 = new Evaluator.Class("B(_\"8M9sFp{X8g^7IY_");
      evaluator_Class0.toString();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("Path: {} -> Root: {}", 466);
      Evaluator.AttributeWithValueMatching evaluator_AttributeWithValueMatching0 = new Evaluator.AttributeWithValueMatching("output", pattern0);
      evaluator_AttributeWithValueMatching0.toString();
      Document document0 = new Document("output");
      evaluator_AttributeWithValueMatching0.key = "";
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      evaluator_AttributeWithValueMatching0.matches(document1, document0);
      Evaluator.ContainsData evaluator_ContainsData0 = new Evaluator.ContainsData("5MN I");
      evaluator_ContainsData0.matches(document1, document0);
      Evaluator.Attribute evaluator_Attribute0 = new Evaluator.Attribute("output");
      evaluator_Attribute0.matches(document1, document1);
      Evaluator.IsNthOfType evaluator_IsNthOfType0 = new Evaluator.IsNthOfType(466, 58);
      // Undeclared exception!
      try { 
        evaluator_IsNthOfType0.calculatePosition(document0, document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$IsNthOfType", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Evaluator.IsNthLastChild evaluator_IsNthLastChild0 = new Evaluator.IsNthLastChild(0, 0);
      evaluator_IsNthLastChild0.getPseudoClass();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "\"W'k-(my)MDs'X";
      Evaluator.AttributeWithValue evaluator_AttributeWithValue0 = new Evaluator.AttributeWithValue("\"J3|s'Qrjb3WWH5W3~P", "\"W'k-(my)MDs'X");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("\"W'k-(my)MDs'X", parseSettings0);
      Tag.valueOf("\"J3|s'Qrjb3WWH5W3~P");
      String string1 = "";
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Evaluator.IndexGreaterThan evaluator_IndexGreaterThan0 = new Evaluator.IndexGreaterThan(65536);
      StructuralEvaluator.ImmediatePreviousSibling structuralEvaluator_ImmediatePreviousSibling0 = new StructuralEvaluator.ImmediatePreviousSibling(evaluator_IndexGreaterThan0);
      structuralEvaluator_ImmediatePreviousSibling0.matches((Element) null, (Element) null);
      structuralEvaluator_ImmediatePreviousSibling0.toString();
      structuralEvaluator_ImmediatePreviousSibling0.matches((Element) null, (Element) null);
      Evaluator.AttributeWithValueContaining evaluator_AttributeWithValueContaining0 = new Evaluator.AttributeWithValueContaining(":prev:gt(65536)", "compact");
      evaluator_AttributeWithValueContaining0.toString();
      Evaluator.IsEmpty evaluator_IsEmpty0 = new Evaluator.IsEmpty();
      evaluator_IsEmpty0.toString();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Evaluator.Id evaluator_Id0 = new Evaluator.Id("GE<HE!}>n&;:");
      evaluator_Id0.toString();
      // Undeclared exception!
      try { 
        Pattern.compile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 0;
      Evaluator.IsNthOfType evaluator_IsNthOfType0 = new Evaluator.IsNthOfType((-70), 0);
      int int1 = (-978);
      Evaluator.IsNthChild evaluator_IsNthChild0 = new Evaluator.IsNthChild((-978), 47);
      evaluator_IsNthChild0.toString();
      Tag tag0 = Tag.valueOf("org.jsoup.select.Evaluator$AttributeWithValueContaining");
      String string0 = "org.jsoup.select.Evaluator$MatchText";
      Element element0 = new Element(tag0, "org.jsoup.select.Evaluator$MatchText");
      evaluator_IsNthChild0.calculatePosition(element0, element0);
      element0.textNodes();
      String string1 = "Oi}#7o";
      Evaluator.AttributeWithValueStarting evaluator_AttributeWithValueStarting0 = null;
      try {
        evaluator_AttributeWithValueStarting0 = new Evaluator.AttributeWithValueStarting("Oi}#7o", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Evaluator.IsNthChild evaluator_IsNthChild0 = new Evaluator.IsNthChild(0, 0);
      evaluator_IsNthChild0.getPseudoClass();
      Evaluator.IsOnlyOfType evaluator_IsOnlyOfType0 = new Evaluator.IsOnlyOfType();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      // Undeclared exception!
      try { 
        Tag.valueOf((String) null, parseSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Evaluator.Attribute evaluator_Attribute0 = new Evaluator.Attribute("org.jsoup.select.Evaluator$IsNthLastOfType");
      evaluator_Attribute0.toString();
      Evaluator.ContainsOwnText evaluator_ContainsOwnText0 = new Evaluator.ContainsOwnText("");
      Document document0 = Document.createShell("");
      Document document1 = document0.ownerDocument();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      evaluator_ContainsOwnText0.matches(document2, document0);
      StructuralEvaluator.PreviousSibling structuralEvaluator_PreviousSibling0 = new StructuralEvaluator.PreviousSibling(evaluator_ContainsOwnText0);
      structuralEvaluator_PreviousSibling0.toString();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      Pattern pattern0 = Pattern.compile("", (-818));
      Evaluator.Matches evaluator_Matches0 = new Evaluator.Matches(pattern0);
      evaluator_Matches0.toString();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Evaluator.AttributeWithValueContaining evaluator_AttributeWithValueContaining0 = new Evaluator.AttributeWithValueContaining("(0lcr+.>%E;$*", "org.eclipse.jetty.util.InetAddressSet$LegacyInetRange");
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Evaluator.Id evaluator_Id0 = new Evaluator.Id("L6jQL");
      Document document0 = new Document("L6jQL");
      Document document1 = document0.normalise();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      Element element0 = document2.body();
      evaluator_Id0.matches(element0, element0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Evaluator.IsNthLastOfType evaluator_IsNthLastOfType0 = new Evaluator.IsNthLastOfType(0, 0);
      evaluator_IsNthLastOfType0.toString();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Evaluator.AllElements evaluator_AllElements0 = new Evaluator.AllElements();
      evaluator_AllElements0.toString();
      Evaluator.Tag evaluator_Tag0 = new Evaluator.Tag("*");
      evaluator_Tag0.toString();
      Document document0 = new Document("*");
      Document document1 = document0.clone();
      document1.getElementsByTag("*");
      evaluator_Tag0.matches(document1, document1);
      String string0 = "org.jsoup.select.Evaluator$AttributeWithValueNot";
      // Undeclared exception!
      try { 
        document1.wrap("*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Evaluator.ContainsOwnText evaluator_ContainsOwnText0 = new Evaluator.ContainsOwnText("u\"C?XV3\"I");
      StructuralEvaluator.Has structuralEvaluator_Has0 = new StructuralEvaluator.Has(evaluator_ContainsOwnText0);
      Evaluator.IsLastChild evaluator_IsLastChild0 = new Evaluator.IsLastChild();
      Document document0 = new Document("u\"C?XV3\"I");
      document0.head();
      // Undeclared exception!
      try { 
        evaluator_IsLastChild0.matches((Element) null, (Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$IsLastChild", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Evaluator.AttributeWithValueNot evaluator_AttributeWithValueNot0 = new Evaluator.AttributeWithValueNot("aae:80V7'M`p-@p0[", "aae:80V7'M`p-@p0[");
      evaluator_AttributeWithValueNot0.toString();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Evaluator.IsFirstChild evaluator_IsFirstChild0 = new Evaluator.IsFirstChild();
      Document document0 = Document.createShell("'nI)K]f&uJU1o30%>jz");
      Document document1 = document0.ownerDocument();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document document2 = document1.outputSettings(document_OutputSettings1);
      Document document3 = document2.clone();
      evaluator_IsFirstChild0.matches(document3, document0);
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      // Undeclared exception!
      try { 
        Tag.valueOf((String) null, parseSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Evaluator.ContainsData evaluator_ContainsData0 = new Evaluator.ContainsData("");
      evaluator_ContainsData0.toString();
      evaluator_ContainsData0.toString();
      StructuralEvaluator.PreviousSibling structuralEvaluator_PreviousSibling0 = new StructuralEvaluator.PreviousSibling(evaluator_ContainsData0);
      Evaluator.Class evaluator_Class0 = new Evaluator.Class("nth-child");
      // Undeclared exception!
      try { 
        evaluator_Class0.matches((Element) null, (Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Class", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("");
      Evaluator.Matches evaluator_Matches0 = new Evaluator.Matches(pattern0);
      Document document0 = Document.createShell("TK,*Ho\"*5=+P");
      document0.getElementsByAttribute("#doctype");
      Element element0 = document0.text("");
      evaluator_Matches0.matches(element0, element0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = "";
      Evaluator.AttributeWithValueStarting evaluator_AttributeWithValueStarting0 = null;
      try {
        evaluator_AttributeWithValueStarting0 = new Evaluator.AttributeWithValueStarting("", "bb8k?@,%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Evaluator.IsEmpty evaluator_IsEmpty0 = new Evaluator.IsEmpty();
      String string0 = "itemscope";
      Evaluator.TagEndsWith evaluator_TagEndsWith0 = new Evaluator.TagEndsWith("itemscope");
      evaluator_TagEndsWith0.toString();
      StructuralEvaluator.Not structuralEvaluator_Not0 = new StructuralEvaluator.Not(evaluator_TagEndsWith0);
      structuralEvaluator_Not0.toString();
      structuralEvaluator_Not0.toString();
      Evaluator.IndexEquals evaluator_IndexEquals0 = new Evaluator.IndexEquals(3680);
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("itemscope", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "itemscope", (Attributes) null);
      Element element0 = pseudoTextElement0.prepend("itemscope");
      evaluator_IndexEquals0.matches(pseudoTextElement0, element0);
      Evaluator.AllElements evaluator_AllElements0 = new Evaluator.AllElements();
      Element element1 = element0.appendElement("itemscope");
      evaluator_AllElements0.matches(pseudoTextElement0, element1);
      int int0 = 0;
      // Undeclared exception!
      try { 
        element0.wrap("xk|(]T");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Evaluator.IsLastOfType evaluator_IsLastOfType0 = new Evaluator.IsLastOfType();
      evaluator_IsLastOfType0.toString();
      StructuralEvaluator.PreviousSibling structuralEvaluator_PreviousSibling0 = new StructuralEvaluator.PreviousSibling(evaluator_IsLastOfType0);
      Document document0 = Document.createShell(":last-of-type");
      structuralEvaluator_PreviousSibling0.matches(document0, document0);
      Evaluator.IsFirstChild evaluator_IsFirstChild0 = new Evaluator.IsFirstChild();
      StructuralEvaluator.Has structuralEvaluator_Has0 = new StructuralEvaluator.Has(evaluator_IsFirstChild0);
      structuralEvaluator_Has0.matches(document0, document0);
      Evaluator[] evaluatorArray0 = new Evaluator[5];
      evaluatorArray0[0] = (Evaluator) evaluator_IsLastOfType0;
      evaluatorArray0[1] = (Evaluator) structuralEvaluator_PreviousSibling0;
      evaluatorArray0[2] = (Evaluator) structuralEvaluator_Has0;
      evaluatorArray0[3] = (Evaluator) evaluator_IsLastOfType0;
      evaluatorArray0[4] = (Evaluator) evaluator_IsLastOfType0;
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or(evaluatorArray0);
      combiningEvaluator_Or0.toString();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Evaluator.AttributeStarting evaluator_AttributeStarting0 = null;
      try {
        evaluator_AttributeStarting0 = new Evaluator.AttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Evaluator.AttributeWithValue evaluator_AttributeWithValue0 = new Evaluator.AttributeWithValue("|", "|");
      StructuralEvaluator.Not structuralEvaluator_Not0 = new StructuralEvaluator.Not(evaluator_AttributeWithValue0);
      structuralEvaluator_Not0.toString();
      Evaluator.MatchText evaluator_MatchText0 = new Evaluator.MatchText();
      Document document0 = Document.createShell("|");
      // Undeclared exception!
      try { 
        document0.selectFirst("VlzgmWN%n");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'VlzgmWN%n': unexpected token at '%n'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = "";
      Evaluator.AttributeWithValue evaluator_AttributeWithValue0 = null;
      try {
        evaluator_AttributeWithValue0 = new Evaluator.AttributeWithValue("org.jsoup.select.Evaluator$IsEmpty", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Evaluator.IsOnlyChild evaluator_IsOnlyChild0 = new Evaluator.IsOnlyChild();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("&quot;", parseSettings0);
      Element element0 = new Element(tag0, "");
      evaluator_IsOnlyChild0.matches(element0, element0);
      evaluator_IsOnlyChild0.toString();
      tag0.getName();
      Evaluator.IsLastChild evaluator_IsLastChild0 = new Evaluator.IsLastChild();
      evaluator_IsLastChild0.matches(element0, element0);
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      // Undeclared exception!
      try { 
        element0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Evaluator.IsLastChild evaluator_IsLastChild0 = new Evaluator.IsLastChild();
      evaluator_IsLastChild0.toString();
      Evaluator.ContainsText evaluator_ContainsText0 = new Evaluator.ContainsText(":last-child");
      evaluator_ContainsText0.toString();
      evaluator_ContainsText0.toString();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("Z%K/wd^");
      Evaluator.AttributeWithValueMatching evaluator_AttributeWithValueMatching0 = new Evaluator.AttributeWithValueMatching("", pattern0);
      StructuralEvaluator.ImmediateParent structuralEvaluator_ImmediateParent0 = new StructuralEvaluator.ImmediateParent(evaluator_AttributeWithValueMatching0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Evaluator.AttributeWithValueEnding evaluator_AttributeWithValueEnding0 = null;
      try {
        evaluator_AttributeWithValueEnding0 = new Evaluator.AttributeWithValueEnding("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Evaluator.ContainsText evaluator_ContainsText0 = new Evaluator.ContainsText("org.eclipse.jetty.util.PathWatcher$Config");
      Document document0 = Document.createShell("org.eclipse.jetty.util.PathWatcher$Config");
      Element element0 = document0.body();
      evaluator_ContainsText0.matches(element0, document0);
      Evaluator.IsFirstChild evaluator_IsFirstChild0 = new Evaluator.IsFirstChild();
      Element element1 = document0.addClass("Ignored idle endpoint {}");
      Element element2 = element1.append("Ignored idle endpoint {}");
      Element element3 = document0.prependChild(element2);
      evaluator_IsFirstChild0.matches(element3, element3);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StructuralEvaluator.Root structuralEvaluator_Root0 = new StructuralEvaluator.Root();
      Evaluator.TagEndsWith evaluator_TagEndsWith0 = new Evaluator.TagEndsWith("");
      evaluator_TagEndsWith0.toString();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Evaluator.IsEmpty evaluator_IsEmpty0 = new Evaluator.IsEmpty();
      Document document0 = Document.createShell("tT2+C.JsaM?bS");
      Document document1 = document0.normalise();
      Element element0 = document1.text("pwl;0tiG/");
      evaluator_IsEmpty0.matches(element0, document0);
      Evaluator.IndexLessThan evaluator_IndexLessThan0 = new Evaluator.IndexLessThan(0);
      evaluator_IndexLessThan0.matches(document1, document1);
      evaluator_IndexLessThan0.matches(document0, document0);
      element0.className();
      Evaluator.IsFirstOfType evaluator_IsFirstOfType0 = new Evaluator.IsFirstOfType();
      evaluator_IsFirstOfType0.toString();
      Evaluator.AllElements evaluator_AllElements0 = new Evaluator.AllElements();
      evaluator_AllElements0.toString();
      evaluator_IsEmpty0.matches(element0, element0);
      Evaluator.IndexGreaterThan evaluator_IndexGreaterThan0 = new Evaluator.IndexGreaterThan(1);
      evaluator_IndexGreaterThan0.matches(element0, element0);
      Evaluator[] evaluatorArray0 = new Evaluator[9];
      Evaluator[] evaluatorArray1 = new Evaluator[2];
      evaluatorArray1[0] = (Evaluator) evaluator_IsFirstOfType0;
      evaluatorArray1[1] = (Evaluator) evaluator_IsEmpty0;
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(evaluatorArray1);
      evaluatorArray0[0] = (Evaluator) combiningEvaluator_And0;
      evaluatorArray0[1] = (Evaluator) evaluator_IndexGreaterThan0;
      evaluatorArray0[2] = (Evaluator) evaluator_IsFirstOfType0;
      evaluatorArray0[3] = (Evaluator) evaluator_IndexLessThan0;
      evaluatorArray0[4] = (Evaluator) evaluator_IndexLessThan0;
      evaluatorArray0[5] = (Evaluator) evaluator_IndexLessThan0;
      evaluatorArray0[6] = (Evaluator) evaluator_IsEmpty0;
      evaluatorArray0[7] = (Evaluator) evaluator_IndexGreaterThan0;
      evaluatorArray0[8] = (Evaluator) evaluator_IndexGreaterThan0;
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or(evaluatorArray0);
      combiningEvaluator_Or0.toString();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Evaluator.IsOnlyChild evaluator_IsOnlyChild0 = new Evaluator.IsOnlyChild();
      evaluator_IsOnlyChild0.toString();
      Evaluator[] evaluatorArray0 = new Evaluator[9];
      evaluatorArray0[0] = (Evaluator) evaluator_IsOnlyChild0;
      evaluatorArray0[1] = (Evaluator) evaluator_IsOnlyChild0;
      evaluatorArray0[2] = (Evaluator) evaluator_IsOnlyChild0;
      evaluatorArray0[3] = (Evaluator) evaluator_IsOnlyChild0;
      evaluatorArray0[4] = (Evaluator) evaluator_IsOnlyChild0;
      evaluatorArray0[5] = (Evaluator) evaluator_IsOnlyChild0;
      evaluatorArray0[6] = (Evaluator) evaluator_IsOnlyChild0;
      evaluatorArray0[7] = (Evaluator) evaluator_IsOnlyChild0;
      evaluatorArray0[8] = (Evaluator) evaluator_IsOnlyChild0;
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or(evaluatorArray0);
      combiningEvaluator_Or0.add(evaluatorArray0[0]);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Evaluator.ContainsText evaluator_ContainsText0 = new Evaluator.ContainsText("&TtoEt}R+");
      evaluator_ContainsText0.toString();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Evaluator.IndexGreaterThan evaluator_IndexGreaterThan0 = new Evaluator.IndexGreaterThan(3);
      evaluator_IndexGreaterThan0.toString();
      evaluator_IndexGreaterThan0.toString();
      Evaluator.IsFirstOfType evaluator_IsFirstOfType0 = new Evaluator.IsFirstOfType();
      evaluator_IsFirstOfType0.toString();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Evaluator.IsOnlyChild evaluator_IsOnlyChild0 = new Evaluator.IsOnlyChild();
      StructuralEvaluator.Not structuralEvaluator_Not0 = new StructuralEvaluator.Not(evaluator_IsOnlyChild0);
      Document document0 = new Document("[%s$=%s]");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document document2 = document1.clone();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document document3 = document2.outputSettings(document_OutputSettings1);
      // Undeclared exception!
      try { 
        document3.wrap("[%s$=%s]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Evaluator.IsNthLastOfType evaluator_IsNthLastOfType0 = new Evaluator.IsNthLastOfType(3, 0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Evaluator.IsOnlyOfType evaluator_IsOnlyOfType0 = new Evaluator.IsOnlyOfType();
      Document document0 = Document.createShell("0C~bqi#Z<9B2!CeZbB");
      evaluator_IsOnlyOfType0.matches(document0, document0);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document document2 = document1.normalise();
      Element element0 = document2.body();
      Element element1 = element0.parent();
      evaluator_IsOnlyOfType0.matches(element1, element0);
      Evaluator.AttributeWithValueEnding evaluator_AttributeWithValueEnding0 = new Evaluator.AttributeWithValueEnding("0C~bqi#Z<9B2!CeZbB", "0C~bqi#Z<9B2!CeZbB");
      element1.firstElementSibling();
      evaluator_AttributeWithValueEnding0.matches(document0, document2);
      document0.getElementsByAttributeValueMatching("xc7E0@-I,<4\"KEeecu", "0C~bqi#Z<9B2!CeZbB");
      // Undeclared exception!
      try { 
        document1.is("0C~bqi#Z<9B2!CeZbB");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'bqi#Z<9B2!CeZbB': unexpected token at '<9B2!CeZbB'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Evaluator.MatchText evaluator_MatchText0 = new Evaluator.MatchText();
      assertNotNull(evaluator_MatchText0);
      assertEquals(":matchText", evaluator_MatchText0.toString());
      
      String string0 = "";
      Evaluator.Attribute evaluator_Attribute0 = new Evaluator.Attribute("");
      assertNotNull(evaluator_Attribute0);
      
      Document document0 = Document.createShell("");
      assertNotNull(document0);
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      
      boolean boolean0 = evaluator_MatchText0.matches(document0, document0);
      assertFalse(boolean0);
      assertEquals(":matchText", evaluator_MatchText0.toString());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      
      Document document1 = new Document("org.jsoup.select.Evaluator$IndexGreaterThan");
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      
      Element element0 = document1.getElementById("org.jsoup.select.Evaluator$IndexGreaterThan");
      assertNull(element0);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      
      Document document2 = document1.outputSettings(document_OutputSettings0);
      assertNotNull(document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document2.hasParent());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document2.location());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      
      String string1 = evaluator_Attribute0.toString();
      assertEquals("[]", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "";
      Document document3 = (Document)document2.append("");
      assertNotNull(document3);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document2.hasParent());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document2.location());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document3.baseUri());
      
      Document document4 = (Document)document3.empty();
      assertNotNull(document4);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document2, document3);
      assertNotSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document3, document1);
      assertSame(document4, document2);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertNotSame(document4, document0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document2.hasParent());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document2.location());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document3.baseUri());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.hasParent());
      assertEquals(0, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document5 = (Document)document4.traverse(nodeVisitor0);
      assertNotNull(document5);
      assertSame(document1, document5);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document5);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document2, document3);
      assertNotSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document3, document1);
      assertSame(document3, document5);
      assertSame(document4, document5);
      assertSame(document4, document2);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertNotSame(document4, document0);
      assertSame(document5, document1);
      assertNotSame(document5, document0);
      assertSame(document5, document4);
      assertSame(document5, document2);
      assertSame(document5, document3);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document5.equals((Object)document0));
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document2.hasParent());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document2.location());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document3.baseUri());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.hasParent());
      assertEquals(0, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document5.baseUri());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document5.location());
      assertFalse(document5.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals(0, document5.childNodeSize());
      
      LinkedBlockingQueue<Node> linkedBlockingQueue0 = new LinkedBlockingQueue<Node>();
      assertNotNull(linkedBlockingQueue0);
      
      // Undeclared exception!
      try { 
        document4.insertChildren((-669), (Collection<? extends Node>) linkedBlockingQueue0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = 250;
      Evaluator.IndexEquals evaluator_IndexEquals0 = new Evaluator.IndexEquals(250);
      assertNotNull(evaluator_IndexEquals0);
      
      String string0 = "";
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      assertNotNull(parseSettings0);
      
      // Undeclared exception!
      try { 
        Tag.valueOf("", parseSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Evaluator.AttributeWithValueNot evaluator_AttributeWithValueNot0 = new Evaluator.AttributeWithValueNot(".V$kcZdbR", ".V$kcZdbR");
      assertNotNull(evaluator_AttributeWithValueNot0);
      
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      assertNotNull(parseSettings0);
      
      // Undeclared exception!
      try { 
        Tag.valueOf("", parseSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String string0 = "OtZ=P^^";
      Evaluator.Attribute evaluator_Attribute0 = new Evaluator.Attribute("OtZ=P^^");
      assertNotNull(evaluator_Attribute0);
      
      String string1 = "";
      Evaluator.ContainsData evaluator_ContainsData0 = new Evaluator.ContainsData("");
      assertNotNull(evaluator_ContainsData0);
      
      Document document0 = Document.createShell("OtZ=P^^");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("OtZ=P^^", document0.baseUri());
      assertEquals("OtZ=P^^", document0.location());
      assertFalse(document0.hasParent());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("OtZ=P^^", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("OtZ=P^^", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("OtZ=P^^", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("OtZ=P^^", document1.baseUri());
      assertFalse(document1.isBlock());
      
      // Undeclared exception!
      try { 
        document1.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Evaluator.IsEmpty evaluator_IsEmpty0 = new Evaluator.IsEmpty();
      assertNotNull(evaluator_IsEmpty0);
      assertEquals(":empty", evaluator_IsEmpty0.toString());
      
      Document document0 = Document.createShell("tT2+C.JsaM?bS");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tT2+C.JsaM?bS", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tT2+C.JsaM?bS", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tT2+C.JsaM?bS", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tT2+C.JsaM?bS", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("tT2+C.JsaM?bS", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tT2+C.JsaM?bS", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      
      Document document2 = (Document)document1.text("pwl;0tiG/");
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tT2+C.JsaM?bS", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tT2+C.JsaM?bS", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("tT2+C.JsaM?bS", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tT2+C.JsaM?bS", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("tT2+C.JsaM?bS", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("tT2+C.JsaM?bS", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      
      boolean boolean0 = evaluator_IsEmpty0.matches(document2, document0);
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals(":empty", evaluator_IsEmpty0.toString());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tT2+C.JsaM?bS", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tT2+C.JsaM?bS", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("tT2+C.JsaM?bS", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tT2+C.JsaM?bS", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("tT2+C.JsaM?bS", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("tT2+C.JsaM?bS", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      
      Evaluator.IndexLessThan evaluator_IndexLessThan0 = new Evaluator.IndexLessThan(0);
      assertNotNull(evaluator_IndexLessThan0);
      
      boolean boolean1 = evaluator_IndexLessThan0.matches(document1, document1);
      assertFalse(boolean1);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertTrue(boolean1 == boolean0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tT2+C.JsaM?bS", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tT2+C.JsaM?bS", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("tT2+C.JsaM?bS", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tT2+C.JsaM?bS", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      
      boolean boolean2 = evaluator_IndexLessThan0.matches(document0, document0);
      assertFalse(boolean2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tT2+C.JsaM?bS", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tT2+C.JsaM?bS", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      String string0 = document2.className();
      assertEquals("", string0);
      assertNotNull(string0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tT2+C.JsaM?bS", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tT2+C.JsaM?bS", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("tT2+C.JsaM?bS", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tT2+C.JsaM?bS", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("tT2+C.JsaM?bS", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("tT2+C.JsaM?bS", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      
      Evaluator.IsFirstOfType evaluator_IsFirstOfType0 = new Evaluator.IsFirstOfType();
      assertNotNull(evaluator_IsFirstOfType0);
      assertEquals(":first-of-type", evaluator_IsFirstOfType0.toString());
      
      String string1 = evaluator_IsFirstOfType0.toString();
      assertEquals(":first-of-type", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(":first-of-type", evaluator_IsFirstOfType0.toString());
      
      Evaluator.AllElements evaluator_AllElements0 = new Evaluator.AllElements();
      assertNotNull(evaluator_AllElements0);
      assertEquals("*", evaluator_AllElements0.toString());
      
      String string2 = evaluator_AllElements0.toString();
      assertEquals("*", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("*", evaluator_AllElements0.toString());
      
      boolean boolean3 = evaluator_IsEmpty0.matches(document2, document2);
      assertFalse(boolean3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertEquals(":empty", evaluator_IsEmpty0.toString());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tT2+C.JsaM?bS", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tT2+C.JsaM?bS", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("tT2+C.JsaM?bS", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tT2+C.JsaM?bS", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("tT2+C.JsaM?bS", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("tT2+C.JsaM?bS", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      
      Evaluator.IndexGreaterThan evaluator_IndexGreaterThan0 = new Evaluator.IndexGreaterThan(1);
      assertNotNull(evaluator_IndexGreaterThan0);
      
      boolean boolean4 = evaluator_IndexGreaterThan0.matches(document2, document2);
      assertFalse(boolean4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tT2+C.JsaM?bS", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tT2+C.JsaM?bS", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("tT2+C.JsaM?bS", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tT2+C.JsaM?bS", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("tT2+C.JsaM?bS", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("tT2+C.JsaM?bS", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      
      Evaluator[] evaluatorArray0 = new Evaluator[9];
      Evaluator[] evaluatorArray1 = new Evaluator[2];
      assertFalse(evaluatorArray1.equals((Object)evaluatorArray0));
      
      evaluatorArray1[0] = (Evaluator) evaluator_IsFirstOfType0;
      evaluatorArray1[1] = (Evaluator) evaluator_IsEmpty0;
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(evaluatorArray1);
      assertEquals(2, evaluatorArray1.length);
      assertNotNull(combiningEvaluator_And0);
      assertFalse(evaluatorArray1.equals((Object)evaluatorArray0));
      
      boolean boolean5 = evaluatorArray1[0].matches(document2, document1);
      assertFalse(boolean5);
      assertEquals(2, evaluatorArray1.length);
      assertNotSame(evaluatorArray1, evaluatorArray0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(evaluatorArray1.equals((Object)evaluatorArray0));
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tT2+C.JsaM?bS", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tT2+C.JsaM?bS", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("tT2+C.JsaM?bS", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("tT2+C.JsaM?bS", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("tT2+C.JsaM?bS", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("tT2+C.JsaM?bS", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      
      evaluatorArray0[0] = (Evaluator) combiningEvaluator_And0;
      evaluatorArray0[1] = (Evaluator) evaluator_IndexGreaterThan0;
      evaluatorArray0[2] = (Evaluator) evaluator_IsFirstOfType0;
      evaluatorArray0[3] = (Evaluator) evaluator_IndexLessThan0;
      evaluatorArray0[4] = (Evaluator) evaluator_IndexLessThan0;
      evaluatorArray0[5] = (Evaluator) evaluator_IndexLessThan0;
      evaluatorArray0[6] = (Evaluator) evaluator_IsEmpty0;
      evaluatorArray0[7] = (Evaluator) evaluator_IndexGreaterThan0;
      evaluatorArray0[8] = (Evaluator) evaluator_IndexGreaterThan0;
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or(evaluatorArray0);
      assertEquals(9, evaluatorArray0.length);
      assertNotNull(combiningEvaluator_Or0);
      assertFalse(evaluatorArray0.equals((Object)evaluatorArray1));
      
      String string3 = combiningEvaluator_Or0.toString();
      assertEquals(9, evaluatorArray0.length);
      assertNotNull(string3);
      assertNotSame(evaluatorArray0, evaluatorArray1);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(evaluatorArray0.equals((Object)evaluatorArray1));
      
      Evaluator.IsLastChild evaluator_IsLastChild0 = new Evaluator.IsLastChild();
      assertNotNull(evaluator_IsLastChild0);
      assertEquals(":last-child", evaluator_IsLastChild0.toString());
      
      boolean boolean6 = evaluator_IsLastChild0.matches(document0, document0);
      assertFalse(boolean6);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean3);
      assertEquals(":last-child", evaluator_IsLastChild0.toString());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tT2+C.JsaM?bS", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tT2+C.JsaM?bS", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Evaluator.IsEmpty evaluator_IsEmpty0 = new Evaluator.IsEmpty();
      assertNotNull(evaluator_IsEmpty0);
      assertEquals(":empty", evaluator_IsEmpty0.toString());
      
      Evaluator.TagEndsWith evaluator_TagEndsWith0 = new Evaluator.TagEndsWith("itemscope");
      assertNotNull(evaluator_TagEndsWith0);
      
      String string0 = evaluator_IsEmpty0.toString();
      assertEquals(":empty", string0);
      assertNotNull(string0);
      assertEquals(":empty", evaluator_IsEmpty0.toString());
      
      StructuralEvaluator.Not structuralEvaluator_Not0 = new StructuralEvaluator.Not(evaluator_TagEndsWith0);
      assertNotNull(structuralEvaluator_Not0);
      
      String string1 = evaluator_IsEmpty0.toString();
      assertEquals(":empty", string1);
      assertNotNull(string1);
      assertEquals(":empty", evaluator_IsEmpty0.toString());
      
      String string2 = structuralEvaluator_Not0.toString();
      assertEquals(":notitemscope", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Evaluator.IndexEquals evaluator_IndexEquals0 = new Evaluator.IndexEquals(3680);
      assertNotNull(evaluator_IndexEquals0);
      
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("itemscope", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertEquals("itemscope", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, ":empty", (Attributes) null);
      assertNotNull(pseudoTextElement0);
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertEquals("itemscope", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(":empty", pseudoTextElement0.baseUri());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      
      Element element0 = pseudoTextElement0.prepend("itemscope");
      assertNotNull(element0);
      assertSame(pseudoTextElement0, element0);
      assertSame(element0, pseudoTextElement0);
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertEquals("itemscope", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(":empty", pseudoTextElement0.baseUri());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(1, pseudoTextElement0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(":empty", element0.baseUri());
      
      boolean boolean0 = evaluator_IndexEquals0.matches(pseudoTextElement0, element0);
      assertFalse(boolean0);
      assertSame(pseudoTextElement0, element0);
      assertSame(element0, pseudoTextElement0);
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertEquals("itemscope", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(":empty", pseudoTextElement0.baseUri());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(1, pseudoTextElement0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(":empty", element0.baseUri());
      
      Evaluator.AllElements evaluator_AllElements0 = new Evaluator.AllElements();
      assertNotNull(evaluator_AllElements0);
      assertEquals("*", evaluator_AllElements0.toString());
      
      Element element1 = new Element(":empty");
      assertNotNull(element1);
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertFalse(element1.isBlock());
      
      boolean boolean1 = evaluator_AllElements0.matches(pseudoTextElement0, element1);
      assertTrue(boolean1);
      assertSame(pseudoTextElement0, element0);
      assertFalse(boolean1 == boolean0);
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertEquals("itemscope", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(":empty", pseudoTextElement0.baseUri());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(1, pseudoTextElement0.childNodeSize());
      assertEquals("*", evaluator_AllElements0.toString());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertFalse(element1.isBlock());
      
      Element element2 = element1.previousElementSibling();
      assertNull(element2);
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertFalse(element1.isBlock());
      
      Evaluator[] evaluatorArray0 = new Evaluator[7];
      evaluatorArray0[0] = (Evaluator) evaluator_AllElements0;
      Evaluator.MatchText evaluator_MatchText0 = new Evaluator.MatchText();
      assertNotNull(evaluator_MatchText0);
      assertEquals(":matchText", evaluator_MatchText0.toString());
      
      evaluatorArray0[1] = (Evaluator) evaluator_MatchText0;
      evaluatorArray0[2] = (Evaluator) evaluator_IsEmpty0;
      evaluatorArray0[3] = (Evaluator) structuralEvaluator_Not0;
      Evaluator.IsFirstChild evaluator_IsFirstChild0 = new Evaluator.IsFirstChild();
      assertNotNull(evaluator_IsFirstChild0);
      assertEquals(":first-child", evaluator_IsFirstChild0.toString());
      
      evaluatorArray0[4] = (Evaluator) evaluator_IsFirstChild0;
      evaluatorArray0[5] = (Evaluator) evaluator_TagEndsWith0;
      evaluatorArray0[6] = (Evaluator) evaluator_TagEndsWith0;
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or(evaluatorArray0);
      assertEquals(7, evaluatorArray0.length);
      assertNotNull(combiningEvaluator_Or0);
      
      Evaluator.IsLastOfType evaluator_IsLastOfType0 = new Evaluator.IsLastOfType();
      assertNotNull(evaluator_IsLastOfType0);
      assertEquals(":last-of-type", evaluator_IsLastOfType0.toString());
      
      combiningEvaluator_Or0.add(evaluator_IsLastOfType0);
      assertEquals(7, evaluatorArray0.length);
      assertEquals(":last-of-type", evaluator_IsLastOfType0.toString());
      
      Evaluator.IsNthChild evaluator_IsNthChild0 = new Evaluator.IsNthChild(0, 0);
      assertNotNull(evaluator_IsNthChild0);
      
      String string3 = evaluator_IsNthChild0.toString();
      assertEquals(":nth-child(0)", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      int int0 = evaluator_IsNthChild0.calculatePosition(pseudoTextElement0, element1);
      assertEquals(1, int0);
      assertSame(pseudoTextElement0, element0);
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertEquals("itemscope", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(":empty", pseudoTextElement0.baseUri());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(1, pseudoTextElement0.childNodeSize());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertFalse(element1.isBlock());
      
      Evaluator.AttributeWithValue evaluator_AttributeWithValue0 = new Evaluator.AttributeWithValue("itemscope", "itemscope");
      assertNotNull(evaluator_AttributeWithValue0);
      
      boolean boolean2 = evaluator_AttributeWithValue0.matches(element1, pseudoTextElement0);
      assertFalse(boolean2);
      assertSame(pseudoTextElement0, element0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertEquals("itemscope", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(":empty", pseudoTextElement0.baseUri());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(1, pseudoTextElement0.childNodeSize());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertFalse(element1.isBlock());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Evaluator.Class evaluator_Class0 = new Evaluator.Class("iF");
      assertNotNull(evaluator_Class0);
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attribute attribute0 = Attribute.createFromEncoded("DB2:a=A<<U(&sJRm", "7#BDiQW");
      assertNotNull(attribute0);
      assertEquals("7#BDiQW", attribute0.getValue());
      assertEquals("DB2:a=A<<U(&sJRm", attribute0.getKey());
      
      Attributes attributes1 = attributes0.put(attribute0);
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals("7#BDiQW", attribute0.getValue());
      assertEquals("DB2:a=A<<U(&sJRm", attribute0.getKey());
      assertEquals(1, attributes1.size());
      
      FormElement formElement0 = null;
      try {
        formElement0 = new FormElement((Tag) null, (String) null, attributes1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Evaluator.IsNthOfType evaluator_IsNthOfType0 = new Evaluator.IsNthOfType(0, 2747);
      Document document0 = Document.createShell("org.jsoup.select.StructuralEvaluator$ImmediatePreviousSibling");
      Element element0 = document0.head();
      element0.getElementsMatchingText("org.eclipse.jetty.io.LeakTrackingByteBufferPool");
      evaluator_IsNthOfType0.calculatePosition(document0, element0);
      Element element1 = element0.appendTo(document0);
      evaluator_IsNthOfType0.calculatePosition(element0, element0);
      StructuralEvaluator.Not structuralEvaluator_Not0 = new StructuralEvaluator.Not(evaluator_IsNthOfType0);
      structuralEvaluator_Not0.toString();
      Evaluator.AttributeWithValue evaluator_AttributeWithValue0 = new Evaluator.AttributeWithValue(":not:nth-of-type(2747)", ":not:nth-of-type(2747)");
      evaluator_AttributeWithValue0.toString();
      Tag tag0 = element1.tag();
      Attributes attributes0 = document0.attributes();
      FormElement formElement0 = new FormElement(tag0, ":not:nth-of-type(2747)", attributes0);
      Evaluator.Matches evaluator_Matches0 = new Evaluator.Matches((Pattern) null);
      evaluator_Matches0.toString();
      StructuralEvaluator.Has structuralEvaluator_Has0 = new StructuralEvaluator.Has(evaluator_Matches0);
      structuralEvaluator_Has0.toString();
      Evaluator.IsLastChild evaluator_IsLastChild0 = new Evaluator.IsLastChild();
      Element element2 = document0.prepend("/mq}v|kfE(=DChG");
      evaluator_IsLastChild0.matches(element1, element2);
      Evaluator.IsOnlyChild evaluator_IsOnlyChild0 = new Evaluator.IsOnlyChild();
      evaluator_IsOnlyChild0.matches(element1, formElement0);
  }
}
