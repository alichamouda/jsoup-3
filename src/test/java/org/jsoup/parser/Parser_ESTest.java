/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 22 22:16:49 GMT 2022
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Element;
import org.jsoup.parser.HtmlTreeBuilder;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.XmlTreeBuilder;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Parser.parseBodyFragment("}n<YCy'.$X>v~{.", "}n<YCy'.$X>v~{.");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.setTrackErrors(1961);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      // Undeclared exception!
      try { 
        parser1.parseInput((Reader) pipedReader0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      PipedReader pipedReader0 = new PipedReader();
      // Undeclared exception!
      try { 
        parser0.parseInput((Reader) pipedReader0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Parser parser0 = new Parser(xmlTreeBuilder0);
      parser0.parseInput("org.eclipse.jetty.util.thread.TimerScheduler", "org.eclipse.jetty.util.thread.TimerScheduler");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(83);
      Parser.parseFragment(":matchesOwn(%s)", (Element) null, ":matchesOwn(%s)", parseErrorList0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      parser0.settings();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Parser parser0 = new Parser(xmlTreeBuilder0);
      parser0.getErrors();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Parser parser1 = parser0.setTrackErrors(1956);
      parser1.parseInput("", "");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Parser.parseBodyFragmentRelaxed("durations=%s", "durations=%s");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      parser0.getTreeBuilder();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Parser.parseXmlFragment("org.jsoup.parser.Parser", "org.jsoup.parser.Parser");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Parser parser1 = parser0.settings((ParseSettings) null);
      assertFalse(parser1.isTrackErrors());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = Parser.unescapeEntities("_vcCNp~a7XLwQ?=E", false);
      assertEquals("_vcCNp~a7XLwQ?=E", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Parser parser1 = parser0.setTreeBuilder(xmlTreeBuilder0);
      assertFalse(parser1.isTrackErrors());
  }
}
