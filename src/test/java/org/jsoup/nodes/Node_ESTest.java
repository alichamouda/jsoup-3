/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 22 22:12:43 GMT 2022
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.select.NodeFilter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("Ni~l-z:nx92KD", "rt5+><tAl", "Ni~l-z:nx92KD", "Ni~l-z:nx92KD");
      DocumentType documentType1 = new DocumentType("J", "rt5+><tAl", "org.jsoup.select.Collector$FirstFinder", "SYSTEM", "PUBLIC");
      documentType0.hasSameValue(documentType1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comment comment0 = new Comment("xC;C!+LjrAsHf");
      comment0.hasSameValue((Object) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("raE6", "raE6");
      textNode0.hasSameValue("raE6");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Tag tag0 = Tag.valueOf("6");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "6", attributes0);
      pseudoTextElement0.equals("V2ke`yuv@%lEX_");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Document.createShell("O");
      Element element0 = document0.body();
      element0.previousSibling();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("Ni~l-z:nx92KD", "rt5+><tAl", "Ni~l-z:nx92KD", "Ni~l-z:nx92KD");
      documentType0.previousSibling();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Tag tag0 = Tag.valueOf("6");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "6", attributes0);
      Document document0 = Document.createShell("#text");
      pseudoTextElement0.parentNode = (Node) document0;
      pseudoTextElement0.previousSibling();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("EIuu _IS<,5&", "EIuu _IS<,5&");
      dataNode0.siblingNodes();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("rt");
      // Undeclared exception!
      try { 
        document0.removeChild(document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Tag tag0 = Tag.valueOf("6");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "6", attributes0);
      Document document0 = Document.createShell("#text");
      pseudoTextElement0.parentNode = (Node) document0;
      document0.replaceChild(pseudoTextElement0, document0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Document.createShell("#text");
      document0.appendChild(document0);
      // Undeclared exception!
      try { 
        document0.replaceChild(document0, document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Document.createShell("#text");
      // Undeclared exception!
      try { 
        document0.replaceChild(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("#text");
      Element element0 = document0.prependElement("#text");
      element0.append("wk");
      element0.unwrap();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Tag tag0 = Tag.valueOf("6");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "6", attributes0);
      Document document0 = Document.createShell("#text");
      pseudoTextElement0.parentNode = (Node) document0;
      pseudoTextElement0.wrap("-j(5J#Z!|%[mZJ?5|>");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Document.createShell("#text");
      document0.toString();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = Document.createShell("#text");
      document0.childNodesCopy();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Tag tag0 = Tag.valueOf("6");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "6", attributes0);
      attributes0.put("V2ke`yuv@%lEX_", "V2ke`yuv@%lEX_");
      pseudoTextElement0.absUrl("V2ke`yuv@%lEX_");
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TextNode textNode0 = new TextNode("4I:`a0P-_:M;W #E,[W", "4I:`a0P-_:M;W #E,[W");
      textNode0.clearAttributes();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = Document.createShell("#text");
      Pattern pattern0 = Pattern.compile("publ");
      document0.getElementsByAttributeValueMatching("abs:", pattern0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = Document.createShell("#text");
      document0.clearAttributes();
      document0.attr("abs:name");
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Node$OuterHtmlVisitor");
      document0.toggleClass("name");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DataNode dataNode0 = new DataNode("details", "details");
      // Undeclared exception!
      try { 
        dataNode0.wrap("abs:");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("raE6", "raE6");
      Document document0 = new Document("yN_R*}Zi-(Gu|ZV");
      document0.prependChild(textNode0);
      textNode0.before("nth-last-child");
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("yN_R*}Zi-(Gu|ZV");
      Document document1 = document0.normalise();
      assertEquals(0, document1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("org.jsoup.select.Evaluator$AttributeWithValueEnding", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("org.jsoup.select.Evaluator$AttributeWithValueEnding");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.select.Evaluator$AttributeWithValueEnding", attributes0);
      // Undeclared exception!
      try { 
        formElement0.replaceWith(cDataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("raE6", "raE6");
      textNode0.toString();
      assertEquals(0, textNode0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("4I:`a0P-_:M;W #E,[W");
      Document document1 = (Document)document0.removeAttr("4I:`a0P-_:M;W #E,[W");
      assertEquals("4I:`a0P-_:M;W #E,[W", document1.location());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      DocumentType documentType0 = new DocumentType((String) null, "name", "valu", "Q,+n", "abs:abs:90.i>vpfa/<'0j%pc");
      stringBuffer0.append((Object) documentType0);
      assertEquals("<!DOCTYPE name \"valu\" \"Q,+n\">", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("Connect Timeout");
      MockFileWriter mockFileWriter0 = new MockFileWriter("Connect Timeout", true);
      MockFileWriter mockFileWriter1 = cDataNode0.html(mockFileWriter0);
      assertSame(mockFileWriter0, mockFileWriter1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Comment comment0 = new Comment("#data", ";Ef\"2?iL_h;");
      Node node0 = comment0.shallowClone();
      assertNotNull(node0);
      assertFalse(node0.hasParent());
      assertEquals(0, node0.siblingIndex());
      assertNotSame(node0, comment0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("#text");
      Element element0 = document0.prependElement("#text");
      assertTrue(element0.hasParent());
      
      element0.unwrap();
      assertFalse(element0.hasParent());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("6<", "%+=w#", ".iOx((FMWj0d}Y");
      // Undeclared exception!
      try { 
        documentType0.filter((NodeFilter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("b0]j^g");
      // Undeclared exception!
      try { 
        document0.after("b0]j^g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = Document.createShell("7");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("abs:");
      cDataNode0.setBaseUri("abs:");
      assertFalse(cDataNode0.hasParent());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document("F");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
