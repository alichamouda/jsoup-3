/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 22 22:11:07 GMT 2022
 */

package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileDescriptor;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.EnumSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.NodeFilter;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Elements_ESTest extends Elements_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Document.createShell("TE.ama");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      List<String> list0 = elements0.eachText();
      assertEquals(0, list0.size());
      
      elements0.forms();
      boolean boolean0 = elements0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "";
      Tag tag0 = Tag.valueOf("v.dM3%MNBJartQS(6");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      Pattern pattern0 = Pattern.compile("");
      Elements elements0 = formElement0.getElementsMatchingText(pattern0);
      elements0.hasClass("");
      elements0.forms();
      String string1 = "";
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "";
      Tag tag0 = Tag.valueOf("v.dM3%MNBJartQS(6");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      Pattern pattern0 = Pattern.compile("");
      Elements elements0 = formElement0.getElementsMatchingText(pattern0);
      attributes0.iterator();
      elements0.is("org.jsoup.select.Elements");
      String string1 = "";
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = Document.createShell("TE.ama");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      document0.classNames();
      Elements elements1 = elements0.eq(0);
      assertFalse(elements1.isEmpty());
      
      String string0 = elements0.outerHtml();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>\n<html>\n <head></head>\n <body></body>\n</html>\n<head></head>", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Document.createShell("ovCkmDh[-");
      Elements elements0 = document0.children();
      Charset charset0 = Charset.defaultCharset();
      charset0.aliases();
      document0.charset(charset0);
      boolean boolean0 = elements0.hasAttr("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "K?1k\\9";
      Document document0 = new Document("K?1k9");
      Document document1 = document0.normalise();
      Elements elements0 = document1.getElementsByClass("K?1k9");
      Elements elements1 = document1.getAllElements();
      elements0.addAll((Collection<? extends Element>) elements1);
      Elements elements2 = elements0.empty();
      assertEquals(4, elements2.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.addClass("");
      elements0.unwrap();
      Elements elements2 = elements1.empty();
      assertSame(elements1, elements2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document("TE.ama");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      elements0.eachText();
      // Undeclared exception!
      try { 
        elements0.wrap("~M_x]7 2R&P,K[\\]c");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = Document.createShell("]BN\u0000.o");
      Element element0 = document0.createElement("o{6PH0&?,c=");
      Elements elements0 = element0.getElementsByIndexGreaterThan((-1));
      // Undeclared exception!
      try { 
        elements0.after("]BN\u0000.o");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("x)td._1=&WHq@UjO[{");
      Document document1 = document0.normalise();
      Elements elements0 = document1.getElementsByClass("x)td._1=&WHq@UjO[{");
      elements0.prevAll();
      elements0.after("x)td._1=&WHq@UjO[{");
      Elements elements1 = elements0.nextAll();
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document("1Y[34K9~1bF#");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Elements elements0 = document1.getAllElements();
      // Undeclared exception!
      try { 
        elements0.before("1Y[34K9~1bF#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.prepend("");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.tagName("t");
      assertEquals(4, elements1.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("{} rejected {}");
      Elements elements0 = document0.getElementsByAttributeValueMatching("", "");
      Elements elements1 = elements0.tagName((String) null);
      Element element0 = elements1.last();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PriorityQueue<Element> priorityQueue0 = new PriorityQueue<Element>();
      Elements elements0 = new Elements(priorityQueue0);
      elements0.html();
      boolean boolean0 = elements0.containsAll(elements0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = Document.createShell("TE.ama");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      elements0.eachText();
      Elements elements1 = elements0.removeClass("");
      assertEquals(3, elements1.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("TE.ama");
      document0.html("TE.ama");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      boolean boolean0 = elements0.hasClass("");
      boolean boolean1 = elements0.hasText();
      assertFalse(boolean1 == boolean0);
      
      List<String> list0 = elements0.eachText();
      assertTrue(list0.contains("TE.ama"));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = Document.createShell("S-zczQ(Q$;t");
      Document document1 = document0.clone();
      Elements elements0 = document1.getElementsByIndexLessThan(770);
      Elements elements1 = elements0.append("S-zczQ(Q$;t");
      String string0 = elements1.text();
      assertEquals("S-zczQ(Q$;t S-zczQ(Q$;t S-zczQ(Q$;t S-zczQ(Q$;t S-zczQ(Q$;t", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = Document.createShell("TE.ama");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "TE.ama");
      elements0.val("TE.ama");
      boolean boolean0 = elements0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("TE.ama");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      Elements elements1 = elements0.removeAttr("TE.ama");
      elements1.val();
      // Undeclared exception!
      try { 
        elements0.unwrap();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getAllElements();
      elements0.attr("");
      Elements elements1 = elements0.eq(913);
      Elements elements2 = elements1.prepend((String) null);
      elements1.val();
      Elements elements3 = elements1.prevAll();
      assertNotSame(elements3, elements2);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Tag tag0 = Tag.valueOf("&5Qq|78U<?|+g");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "&5Qq|78U<?|+g", attributes0);
      Elements elements0 = pseudoTextElement0.getElementsByAttributeValueNot("%s@%x[size=%d]", "&5Qq|78U<?|+g");
      // Undeclared exception!
      try { 
        elements0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("{} rejected {}");
      document0.toggleClass("org.jsoup.select.Elements");
      Elements elements0 = document0.getElementsByTag(" ");
      Elements elements1 = elements0.toggleClass("");
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Element[] elementArray0 = new Element[1];
      Elements elements0 = new Elements(elementArray0);
      String string0 = "";
      // Undeclared exception!
      try { 
        elements0.addClass("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document("x)td._1=&WHq@UjO[{");
      Document document1 = document0.normalise();
      Elements elements0 = document1.getElementsByClass("x)td._1=&WHq@UjO[{");
      Elements elements1 = elements0.clone();
      elements1.addClass("x)td._1=&WHq@UjO[{");
      elements1.eachAttr("");
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document("x)td._1=&WHq@UjO[{");
      Document document1 = document0.normalise();
      Elements elements0 = document1.getElementsByClass("x)td._1=&WHq@UjO[{");
      elements0.wrap("x)td._1=&WHq@UjO[{");
      elements0.removeAttr("");
      Elements elements1 = elements0.nextAll();
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Element[] elementArray0 = new Element[8];
      Element element0 = new Element("Object must not be null");
      elementArray0[5] = element0;
      Elements elements0 = element0.getElementsByTag("Object must not be null");
      List<String> list0 = elements0.eachAttr("Object must not be null");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document("{");
      Pattern pattern0 = Pattern.compile("");
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      Elements elements1 = elements0.attr("", "");
      Elements elements2 = new Elements((List<Element>) elements1);
      elements2.hasAttr("");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = Document.createShell(":={q?L['/'OT");
      Elements elements0 = document0.getElementsByIndexLessThan((-2160));
      Elements elements1 = elements0.html("");
      elements0.hasAttr(":={q?L['/'OT");
      List<FormElement> list0 = elements1.forms();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.nextAll();
      Elements elements2 = elements1.clone();
      assertNotSame(elements2, elements1);
      
      String string0 = elements0.text();
      assertNotSame(elements0, elements1);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("x)td._1=&WHq@UjO[{");
      Document document1 = document0.normalise();
      Elements elements0 = document1.getElementsByClass("x)td._1=&WHq@UjO[{");
      elements0.parents();
      Elements elements1 = elements0.clone();
      elements0.eachAttr("");
      assertNotSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = new Document("x)td._1=&WHq@UjO[{");
      Document document1 = document0.normalise();
      Elements elements0 = document1.getElementsByClass("x)td._1=&WHq@UjO[{");
      elements0.before("x)td._1=&WHq@UjO[{");
      elements0.toString();
      List<String> list0 = elements0.eachAttr("");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Elements elements0 = new Elements();
      elements0.outerHtml();
      // Undeclared exception!
      try { 
        elements0.prev(" `R ($O)%~zQLK>6");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query ' `R ($O)%~zQLK>6': unexpected token at '`R ($O)%~zQLK>6'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("ecCG", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "u@UGFt0n|fb:F", attributes0);
      Pattern pattern0 = Pattern.compile("");
      Elements elements0 = element0.getElementsMatchingOwnText(pattern0);
      elements0.next();
      // Undeclared exception!
      try { 
        elements0.not("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Element[] elementArray0 = new Element[3];
      CDataNode cDataNode0 = new CDataNode("]Tp}BF8 l");
      Elements elements0 = new Elements(elementArray0);
      Element element0 = elements0.last();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document("x)td._1=&WHq@UjO[{");
      Document document1 = document0.normalise();
      Elements elements0 = document1.getElementsByClass("x)td._1=&WHq@UjO[{");
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Elements elements1 = elements0.traverse(nodeVisitor0);
      List<String> list0 = elements1.eachAttr("");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("JveY", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "tr", attributes0);
      Elements elements0 = formElement0.parents();
      Elements elements1 = elements0.wrap("{} addIfAbsent added {}");
      Elements elements2 = elements1.select("tr");
      Elements elements3 = elements2.attr("JveY", "");
      assertTrue(elements3.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getAllElements();
      elements0.html("");
      elements0.parents();
      Elements elements1 = elements0.prevAll();
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Elements elements0 = new Elements(1263);
      Elements elements1 = elements0.prev();
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getAllElements();
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null, (NodeFilter.FilterResult) null, (NodeFilter.FilterResult) null, (NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      elements0.forEach(consumer0);
      elements0.filter(nodeFilter0);
      Function<Object, Locale.Category> function0 = (Function<Object, Locale.Category>) mock(Function.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = Document.createShell("TEama");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      elements0.next("TEama");
      // Undeclared exception!
      try { 
        elements0.unwrap();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getAllElements();
      Function<Object, EnumSet<Locale.Category>> function0 = (Function<Object, EnumSet<Locale.Category>>) mock(Function.class, new ViolatedAssumptionAnswer());
      elements0.nextAll((String) null);
      elements0.prevAll();
  }
}
