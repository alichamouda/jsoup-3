/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 22 22:15:56 GMT 2022
 */

package org.jsoup.safety;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.safety.Cleaner;
import org.jsoup.safety.Whitelist;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Cleaner_ESTest extends Cleaner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Whitelist whitelist0 = mock(Whitelist.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(whitelist0).isSafeTag(anyString());
      Cleaner cleaner0 = new Cleaner(whitelist0);
      cleaner0.isValidBodyHtml("");
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Whitelist whitelist0 = mock(Whitelist.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false).when(whitelist0).isSafeTag(anyString());
      Cleaner cleaner0 = new Cleaner(whitelist0);
      cleaner0.isValidBodyHtml("org.jsoup.safety.Cleaner$1");
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      doReturn((Element) null).when(document0).body();
      doReturn("]W9/m_Jj,Wu<E").when(document0).baseUri();
      Document document1 = cleaner0.clean(document0);
      Document document2 = mock(Document.class, new ViolatedAssumptionAnswer());
      doReturn(document1, (Element) null).when(document2).body();
      doReturn("").when(document2).baseUri();
      Document document3 = cleaner0.clean(document2);
      cleaner0.clean(document3);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Whitelist whitelist0 = mock(Whitelist.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(whitelist0).isSafeTag(anyString());
      Cleaner cleaner0 = new Cleaner(whitelist0);
      // Undeclared exception!
      try { 
        cleaner0.isValidBodyHtml("#9");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.safety.Whitelist", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Whitelist whitelist0 = mock(Whitelist.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(whitelist0).isSafeTag(anyString());
      Cleaner cleaner0 = new Cleaner(whitelist0);
      cleaner0.isValidBodyHtml("<fa6Apzq@s8$/rO");
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Whitelist whitelist0 = mock(Whitelist.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(whitelist0).isSafeTag(anyString());
      Cleaner cleaner0 = new Cleaner(whitelist0);
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      doReturn((Element) null).when(document0).body();
      doReturn("T@PzOA2B<").when(document0).baseUri();
      Document document1 = cleaner0.clean(document0);
      cleaner0.isValid(document1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Whitelist whitelist0 = mock(Whitelist.class, new ViolatedAssumptionAnswer());
      Cleaner cleaner0 = new Cleaner(whitelist0);
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      Element element1 = mock(Element.class, new ViolatedAssumptionAnswer());
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      doReturn((Element) null).when(document0).body();
      doReturn("DoctypeSystemIdentifier_doubleQuoted").when(document0).baseUri();
      cleaner0.clean(document0);
  }
}
