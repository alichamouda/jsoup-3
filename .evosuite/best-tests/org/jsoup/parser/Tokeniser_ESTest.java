/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 22 22:11:26 GMT 2022
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringReader;
import java.util.Comparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.parser.CharacterReader;
import org.jsoup.parser.ParseError;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.Token;
import org.jsoup.parser.Tokeniser;
import org.jsoup.parser.TokeniserState;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Tokeniser_ESTest extends Tokeniser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(1187);
      ParseError parseError0 = mock(ParseError.class, new ViolatedAssumptionAnswer());
      parseErrorList0.add(parseError0);
      Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null, parseErrorList0);
      parseErrorList0.clone();
      TokeniserState tokeniserState0 = TokeniserState.ScriptDataDoubleEscapedDash;
      // Undeclared exception!
      try { 
        tokeniser0.eofError(tokeniserState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tokeniser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("&Y'\"?i G.+`5&xm");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(0);
      Comparator<ParseError> comparator0 = (Comparator<ParseError>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      parseErrorList0.sort(comparator0);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      parseErrorList0.add((ParseError) null);
      tokeniser0.emit("&Y'\"?i G.+`5&xm");
      TokeniserState tokeniserState0 = TokeniserState.TagOpen;
      tokeniser0.eofError(tokeniserState0);
      tokeniser0.emitDoctypePending();
      assertEquals(1, parseErrorList0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("bg&TSGZ_U");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(630);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      TokeniserState tokeniserState0 = TokeniserState.AfterDoctypePublicIdentifier;
      tokeniser0.error(tokeniserState0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null, parseErrorList0);
      tokeniser0.createTempBuffer();
      TokeniserState tokeniserState0 = TokeniserState.ScriptDataDoubleEscapeEnd;
      tokeniser0.error(tokeniserState0);
      TokeniserState tokeniserState1 = TokeniserState.CommentEndDash;
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("&lt;");
      ParseErrorList parseErrorList0 = new ParseErrorList(730, 730);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniser0.isAppropriateEndTagToken();
      tokeniser0.emitDoctypePending();
      tokeniser0.unescapeEntities(false);
      tokeniser0.isAppropriateEndTagToken();
      boolean boolean0 = tokeniser0.isAppropriateEndTagToken();
      assertEquals(4, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(";J&%m\"");
      ParseErrorList parseErrorList0 = new ParseErrorList(4, 4);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Character character0 = new Character('2');
      tokeniser0.consumeCharacterReference(character0, false);
      tokeniser0.read();
      tokeniser0.getState();
      assertFalse(parseErrorList0.isEmpty());
      assertEquals(6, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("&lt;");
      ParseErrorList parseErrorList0 = new ParseErrorList(730, 730);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniser0.unescapeEntities(true);
      boolean boolean0 = tokeniser0.isAppropriateEndTagToken();
      assertEquals(4, characterReader0.pos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("#");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(0);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Character character0 = Character.valueOf('0');
      tokeniser0.consumeCharacterReference(character0, false);
      tokeniser0.createDoctypePending();
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("&Y'\"?i G.+`5&xm");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(0);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Character character0 = Character.valueOf('3');
      tokeniser0.consumeCharacterReference(character0, true);
      tokeniser0.emitDoctypePending();
      // Undeclared exception!
      try { 
        tokeniser0.emitCommentPending();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // There is an unread token pending!
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("|++#]Sz");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(4100);
      characterReader0.nextIndexOf("|++#]Sz");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Character character0 = new Character('\\');
      Character.isBmpCodePoint(0);
      tokeniser0.consumeCharacterReference(character0, true);
      tokeniser0.currentNodeInHtmlNS();
      TokeniserState tokeniserState0 = TokeniserState.CommentStart;
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("|++#]Sz");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(4100);
      characterReader0.nextIndexOf("|++#]Sz");
      char[] charArray0 = new char[6];
      charArray0[5] = '[';
      characterReader0.consumeToAnySorted(charArray0);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniser0.consumeCharacterReference((Character) charArray0[3], true);
      boolean boolean0 = tokeniser0.currentNodeInHtmlNS();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      CharacterReader characterReader0 = new CharacterReader("B5qM3`-g;p)B");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token.EndTag token_EndTag0 = new Token.EndTag();
      Token.EndTag token_EndTag1 = (Token.EndTag)token_EndTag0.reset();
      token_EndTag1.newAttribute();
      tokeniser0.emit(token_EndTag1);
      Token.StartTag token_StartTag0 = new Token.StartTag();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=9<#Uk1?5Gjm7K");
      stringReader0.ready();
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 916);
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      characterReader0.consumeLetterSequence();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniser0.createTagPending(false);
      tokeniser0.emitTagPending();
      tokeniser0.createTempBuffer();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("|++#]Sz");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(4100);
      characterReader0.nextIndexOf("|++#]Sz");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniser0.currentNodeInHtmlNS();
      tokeniser0.error("|");
      Token.Tag token_Tag0 = tokeniser0.createTagPending(true);
      TokeniserState tokeniserState0 = TokeniserState.CommentStart;
      tokeniser0.emit(token_Tag0);
      assertEquals(1, parseErrorList0.size());
      assertFalse(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("__=UziElZ.");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 428);
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniser0.read();
      assertEquals(10, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=9<#Uk1?5Gjm7K");
      stringReader0.ready();
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 916);
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      characterReader0.consumeTo('D');
      characterReader0.consumeLetterSequence();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      ParseError parseError0 = mock(ParseError.class, new ViolatedAssumptionAnswer());
      parseErrorList0.add(parseError0);
      tokeniser0.read();
      tokeniser0.createTempBuffer();
      tokeniser0.createTempBuffer();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("|++#]Sz");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(4100);
      characterReader0.nextIndexOf("|++#]Sz");
      char[] charArray0 = new char[6];
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniser0.createTempBuffer();
      tokeniser0.emit(charArray0);
      tokeniser0.error("|");
      boolean boolean0 = tokeniser0.currentNodeInHtmlNS();
      assertEquals(1, parseErrorList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(0);
      parseErrorList0.ensureCapacity(939);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniser0.createDoctypePending();
      tokeniser0.emit("jC?'^1'),&m");
      // Undeclared exception!
      try { 
        tokeniser0.emit((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tokeniser", e);
      }
  }
}
